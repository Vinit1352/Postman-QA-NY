{
	"info": {
		"_postman_id": "c1ad1991-feca-451a-b046-17d965004c94",
		"name": "NY User Cancellation Newman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38579165",
		"_collection_link": "https://nammayatri.postman.co/workspace/QA-Workspace~237e908c-581a-4f28-bf41-f19fc05bd96f/collection/38579165-c1ad1991-feca-451a-b046-17d965004c94?action=share&source=collection_link&creator=38579165"
	},
	"item": [
		{
			"name": "Drivernumber",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"pm.collectionVariables.set(\"curr_rider_authId\", jsonData.authId);",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    console.log('req', request)",
							"    console.log('res', responseBody)",
							"    pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"estimatesRetryCount\",0)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"mobileNumber\": \"6378299821\",\n    \"mobileCountryCode\": \"+91\",\n    \"merchantId\": \"7f7896dd-787e-4a0b-8675-e9e6fe93bb8f\",\n    \"merchantOperatingCity\": \"Bangalore\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL_namma_P}}/auth",
					"host": [
						"{{baseURL_namma_P}}"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "DriverOTP",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var response = JSON.parse(responseBody);",
							"pm.collectionVariables.set(\"rider_token\", response.token);",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    console.log('req', request)",
							"    console.log('res', responseBody)",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"setTimeout(function(){},1000)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"otp\" : \"7891\",\n    \"deviceToken\" : \"7398347348\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL_namma_P}}/auth/:authId/verify",
					"host": [
						"{{baseURL_namma_P}}"
					],
					"path": [
						"auth",
						":authId",
						"verify"
					],
					"variable": [
						{
							"key": "authId",
							"value": "{{curr_rider_authId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Driverlocation",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var moment = require('moment');",
							"pm.globals.set(\"current_time\", moment.utc().format(\"YYYY-MM-DDTHH:mm:ssZ\"));",
							"setTimeout(function(){},1000)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    console.log('req', request)",
							"    console.log('res', responseBody)",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{rider_token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "token",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json;charset=utf-8",
						"type": "text",
						"disabled": true
					},
					{
						"key": "vt",
						"value": "AUTO_RICKSHAW",
						"type": "text",
						"disabled": true
					},
					{
						"key": "mId",
						"value": "7f7896dd-787e-4a0b-8675-e9e6fe93bb8f",
						"type": "text"
					},
					{
						"key": "dm",
						"value": "ONLINE",
						"type": "text"
					},
					{
						"key": "vt",
						"value": "SUV",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "[\n    {\n        \"pt\": {\n           \"lat\":12.94201600115985, \n            \"lon\":77.62191800997223 \n        },\n        \"ts\": \"{{current_time}}\"\n    }\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL_namma_P}}/driver/location",
					"host": [
						"{{baseURL_namma_P}}"
					],
					"path": [
						"driver",
						"location"
					]
				}
			},
			"response": []
		},
		{
			"name": "Driverprofile",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    console.log('req', pm.request);",
							"    console.log('res', pm.response);",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var responseBody = pm.response.json()",
							" pm.collectionVariables.set(\"linkedVehicleVariant\", responseBody.linkedVehicle.variant)",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"setTimeout(function(){},1000)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{rider_token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "token",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL_namma_P}}/driver/profile",
					"host": [
						"{{baseURL_namma_P}}"
					],
					"path": [
						"driver",
						"profile"
					]
				}
			},
			"response": []
		},
		{
			"name": "Usernumber",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData=JSON.parse(responseBody);",
							"pm.collectionVariables.set(\"curr_user_authId\", jsonData.authId);",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    console.log('req', request)",
							"    console.log('res', responseBody)",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"setTimeout(function(){},2000)",
							"",
							"const prefixOptions = ['9', '8', '7', '6'];",
							"const prefix = prefixOptions[Math.floor(Math.random() * prefixOptions.length)];",
							"const randomNumber = prefix + Math.floor(100000000 + Math.random() * 900000000).toString();",
							"",
							"pm.collectionVariables.set(\"UserMobNumber\", randomNumber);",
							"console.log(pm.collectionVariables.get(\"UserMobNumber\"));",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"mobileNumber\": \"{{UserMobNumber}}\",\n    \"mobileCountryCode\": \"+91\",\n    \"merchantId\": \"NAMMA_YATRI\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl_app}}/auth",
					"host": [
						"{{baseUrl_app}}"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "UserOtp",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"pm.collectionVariables.set(\"curr_user_token\", jsonData.token);",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    console.log('req', request)",
							"    console.log('res', responseBody)",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"setTimeout(function(){},2000)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{curr_user_authId}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "token",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"otp\" : \"7891\",\n    \"deviceToken\" : \"9123b5dc-99a0-4306-b90d-23822\" \n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl_app}}/auth/:authId/verify",
					"host": [
						"{{baseUrl_app}}"
					],
					"path": [
						"auth",
						":authId",
						"verify"
					],
					"variable": [
						{
							"key": "authId",
							"value": "{{curr_user_authId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "RideSearch",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"pm.collectionVariables.set(\"curr_searchId\", jsonData.searchId);",
							"",
							" pm.test(\"Status code is 200\", function () {",
							"    console.log('req', request)",
							"    console.log('res', responseBody)",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"setTimeout(function(){},4000)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{curr_user_token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "token",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"fareProductType\": \"ONE_WAY\",\n    \"contents\": {\n        \"origin\": {\n            \"address\": {\n                \"area\": \"8th Block Koramangala\",\n                \"areaCode\": \"560047\",\n                \"building\": \"Juspay Buildings\",\n                \"city\": \"Bangalore\",\n                \"country\": \"India\",\n                \"door\": \"#444\",\n                \"street\": \"18th Main\",\n                \"state\": \"Karnataka\"\n            },\n            \"gps\": {\n                \"lat\": 12.94201600115985,\n                \"lon\": 77.62191800997223\n            }\n        },\n        \"destination\": {\n            \"address\": {\n                \"area\": \"6th Block Koramangala\",\n                \"areaCode\": \"560047\",\n                \"building\": \"Juspay Apartments\",\n                \"city\": \"Bangalore\",\n                \"country\": \"India\",\n                \"door\": \"#444\",\n                \"street\": \"18th Main\",\n                \"state\": \"Karnataka\"\n            },\n            \"gps\": {\n                \"lat\": 12.944387315918812,\n                \"lon\": 77.59095760106746\n            }\n        }\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl_app}}/rideSearch",
					"host": [
						"{{baseUrl_app}}"
					],
					"path": [
						"rideSearch"
					]
				}
			},
			"response": []
		},
		{
			"name": "SearchIdResults",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"var linkedVehicleVariant = pm.collectionVariables.get(\"linkedVehicleVariant\");",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    console.log('req', pm.request)",
							"    console.log('res', pm.response)",
							"    pm.response.to.have.status(200);",
							"});",
							"var estimateslen = jsonData.estimates.length;",
							"var estimatesRetryCount = pm.collectionVariables.get(\"estimatesRetryCount\")",
							"",
							"if(estimateslen==0 && estimatesRetryCount <4)",
							"{",
							"    estimatesRetryCount++",
							"    pm.execution.setNextRequest(pm.info.requestName)",
							"}",
							"",
							"",
							"for (let i = 0; i < estimateslen; i++) {",
							"",
							"    if (jsonData.estimates[i].agencyName === \"NAMMA_YATRI\" && jsonData.estimates[i].serviceTierType === linkedVehicleVariant) {",
							"        pm.collectionVariables.set(\"estimateId\", jsonData.estimates[i].id);",
							"    }",
							"}",
							"setTimeout(function(){},2000)",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"setTimeout(function(){},2000)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{curr_user_token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "token",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "token",
						"value": "{{curr_user_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl_app}}/rideSearch/:searchId/results",
					"host": [
						"{{baseUrl_app}}"
					],
					"path": [
						"rideSearch",
						":searchId",
						"results"
					],
					"variable": [
						{
							"key": "searchId",
							"value": "{{curr_searchId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "estimateId/select2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"setTimeout(function(){},1500)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    console.log('req', request)",
							"    console.log('res', responseBody)",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"": true
				}
			},
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "key",
							"value": "token",
							"type": "string"
						},
						{
							"key": "value",
							"value": "{{curr_user_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"customerExtraFee\": null,\n  \"autoAssignEnabledV2\": true,\n  \"autoAssignEnabled\": true\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl_app}}/estimate/:estimateId/select2",
					"host": [
						"{{baseUrl_app}}"
					],
					"path": [
						"estimate",
						":estimateId",
						"select2"
					],
					"query": [
						{
							"key": "autoAssignEnabledV2",
							"value": "true",
							"disabled": true
						},
						{
							"key": "autoAssignEnabled",
							"value": null,
							"disabled": true
						}
					],
					"variable": [
						{
							"key": "estimateId",
							"value": "{{estimateId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "nearbyRideRequest",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"    console.log('req', pm.request)",
							"     console.log('res', pm.response)",
							"});",
							"",
							"const body = pm.response.json(); ",
							"let nearbyRequestTryCount = pm.collectionVariables.get(\"nearbyRequestTryCount\");",
							"",
							"if(body.searchRequestsForDriver.length!==0)",
							"{",
							"    pm.collectionVariables.set(\"searchReq_Id\",body.searchRequestsForDriver[0].searchRequestId)",
							"}",
							"else",
							"{   console.log(nearbyRequestTryCount)",
							"    if (!nearbyRequestTryCount) {",
							"        pm.collectionVariables.set(\"nearbyRequestTryCount\", 1);",
							"        console.log(\"Coming here\")",
							"        } ",
							"    if (nearbyRequestTryCount < 4) {",
							"        nearbyRequestTryCount++;",
							"        pm.collectionVariables.set(\"nearbyRequestTryCount\", nearbyRequestTryCount);",
							"         console.log(\"Coming here11\")",
							"         setTimeout(function(){},2000)",
							"        pm.execution.setNextRequest(pm.info.requestName);",
							"        } ",
							"    else {",
							"        pm.collectionVariables.set(\"nearbyRequestTryCount\", 0);",
							"        console.log(\"Did'nt receive the request so stopping execution\")",
							"        pm.execution.setNextRequest(null)",
							"        }",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"setTimeout(function(){},4000)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{rider_token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "token",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL_namma_P}}/driver/nearbyRideRequest",
					"host": [
						"{{baseURL_namma_P}}"
					],
					"path": [
						"driver",
						"nearbyRideRequest"
					]
				}
			},
			"response": []
		},
		{
			"name": "quoteOffer",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"setTimeout(function(){},1500)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    console.log('req', request)",
							"    console.log('res', responseBody)",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{rider_token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "token",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"searchRequestId\":\"{{searchReq_Id}}\",\n  \"offeredFare\": 0\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL_namma_P}}/driver/searchRequest/quote/offer",
					"host": [
						"{{baseURL_namma_P}}"
					],
					"path": [
						"driver",
						"searchRequest",
						"quote",
						"offer"
					]
				}
			},
			"response": []
		},
		{
			"name": "UserBookingList",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    console.log('req', request)",
							"    console.log('res', responseBody)",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.collectionVariables.set(\"otp\", jsonData.list[0].rideList[0].rideOtp);",
							"pm.collectionVariables.set(\"customer_bookingId\", jsonData.list[0].id);",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"setTimeout(function(){},1500)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{curr_user_token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "token",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl_app}}/rideBooking/list?limit=1",
					"host": [
						"{{baseUrl_app}}"
					],
					"path": [
						"rideBooking",
						"list"
					],
					"query": [
						{
							"key": "limit",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "driverRideList",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"pm.test(\"Status code is 200\", function () {",
							"    console.log('req', request)",
							"    console.log('res', responseBody)",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.collectionVariables.set(\"DriverRide_id\", jsonData.list[0].id);",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"setTimeout(function(){},1500)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{rider_token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "token",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL_namma_P}}/driver/ride/list?limit=2&onlyActive=true",
					"host": [
						"{{baseURL_namma_P}}"
					],
					"path": [
						"driver",
						"ride",
						"list"
					],
					"query": [
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "onlyActive",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "User Cancellation",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verified whether status code is 200\", function () {",
							"    console.log('req', request)",
							"    console.log('res', responseBody)",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"if (responseCode.code !== 200) ",
							"{",
							"    postman.setNextRequest(null);",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{curr_user_token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "token",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json;charset=utf-8"
					},
					{
						"key": "token",
						"value": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"additionalInfo\": \"By Mistake\",\n    \"reasonCode\": \"By Mistake By Mistake\",\n    \"reasonStage\": \"OnSearch\"\n}\n"
				},
				"url": {
					"raw": "{{baseUrl_app}}/rideBooking/:bookingId/cancel",
					"host": [
						"{{baseUrl_app}}"
					],
					"path": [
						"rideBooking",
						":bookingId",
						"cancel"
					],
					"variable": [
						{
							"key": "bookingId",
							"value": "{{customer_bookingId}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "curr_rider_authId",
			"value": ""
		},
		{
			"key": "rider_token",
			"value": ""
		},
		{
			"key": "curr_user_authId",
			"value": ""
		},
		{
			"key": "curr_user_token",
			"value": ""
		},
		{
			"key": "curr_searchId",
			"value": ""
		},
		{
			"key": "estimate_id",
			"value": ""
		},
		{
			"key": "searchReq_Id",
			"value": ""
		},
		{
			"key": "quote_id",
			"value": ""
		},
		{
			"key": "otp",
			"value": ""
		},
		{
			"key": "customer_bookingId",
			"value": ""
		},
		{
			"key": "DriverRide_id",
			"value": ""
		},
		{
			"key": "autoEstimateId",
			"value": ""
		},
		{
			"key": "taxiEstimateId",
			"value": ""
		},
		{
			"key": "hatchbackEstimateId",
			"value": ""
		},
		{
			"key": "sedanEstimateId",
			"value": ""
		},
		{
			"key": "suvEstimateId",
			"value": ""
		},
		{
			"key": "linkedVehicleVariant",
			"value": ""
		},
		{
			"key": "nearbyRequestTryCount",
			"value": ""
		},
		{
			"key": "estimateId",
			"value": ""
		},
		{
			"key": "estimatesRetryCount",
			"value": ""
		},
		{
			"key": "UserMobNumber",
			"value": ""
		}
	]
}