{
  "info": {
    "_postman_id": "4b5f3ea2-9e6c-43fe-9656-fa5f5698818a",
    "name": "Forward Batching Runner",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "updatedAt": "2024-12-24T07:38:24.000Z",
    "createdAt": "2024-12-24T07:38:23.000Z",
    "lastUpdatedBy": "38579165",
    "uid": "38579165-4b5f3ea2-9e6c-43fe-9656-fa5f5698818a"
  },
  "item": [
    {
      "name": "Assigning the Current Rides",
      "item": [
        {
          "name": "/auth current Ride",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "",
                  "  pm.test(\"Verify whether Status code is 200\", function () {",
                  "    console.log(\"Request:\", pm.request);",
                  "    console.log(\"Response Body:\", pm.response.text());",
                  "",
                  "    try {",
                  "        pm.response.to.have.status(200);",
                  "        } ",
                  "    catch (error) {",
                  "        console.log(\"Status Code is not 200: It is \", pm.response.code);",
                  "        pm.collectionVariables.set(\"initial_count\", 1);",
                  "        throw new Error(\"Status Code is not 200\");",
                  "    }",
                  "});",
                  "",
                  "",
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "let driverAuthIds = pm.collectionVariables.get('driverAuthIds');",
                  "",
                  "// Retrieve the array from collection variables and parse it",
                  "if (driverAuthIds) ",
                  "{",
                  "    driverAuthIds = JSON.parse(driverAuthIds);",
                  "} ",
                  "",
                  "else ",
                  "{",
                  "    driverAuthIds = [];",
                  "}",
                  "",
                  "driverAuthIds.push(jsonData.authId);",
                  "",
                  "// Convert the updated array back to a JSON string",
                  "pm.collectionVariables.set(\"driverAuthIds\", JSON.stringify(driverAuthIds));",
                  ""
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "837d6e78-9b0d-4572-bd58-4bdfadd11248"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var initial_count = parseInt(pm.collectionVariables.get(\"initial_count\"));",
                  "pm.collectionVariables.set(\"rseq_count\",0)",
                  "pm.collectionVariables.set(\"ncrr_count\",0)",
                  "pm.collectionVariables.set(\"estimatesRetryCount\",0)",
                  "pm.collectionVariables.set(\"locationFlag\",false)",
                  "",
                  "function driverNumbersplit() {",
                  "    var driverNumbers = data[\"initialRideDriverNumbers\"]; ",
                  "    console.log(driverNumbers);",
                  "    // Split the driver numbers by comma",
                  "    var commaSeperation = driverNumbers.split(\",\");",
                  "    // Remove any extra spaces",
                  "    var trimmedDriverNumbers = commaSeperation.map(function(number) {",
                  "        return number.trim();",
                  "    });",
                  "    // Store the array as a JSON string",
                  "    pm.collectionVariables.set(\"driverNumbers\", JSON.stringify(trimmedDriverNumbers));",
                  "}",
                  "",
                  "if(initial_count==1)",
                  "    driverNumbersplit();",
                  "",
                  "// Parse the JSON string back into an array",
                  "let driverNumbers = JSON.parse(pm.collectionVariables.get(\"driverNumbers\"));",
                  "",
                  "pm.collectionVariables.set(\"onRideDriversCount\",driverNumbers.length)",
                  "var totalDriverNumbers = pm.collectionVariables.get(\"totalDriverNumbers\");",
                  "console.log(totalDriverNumbers);",
                  "",
                  "if (initial_count === 1) {",
                  "    pm.collectionVariables.set(\"driverAuthIds\", JSON.stringify([]));",
                  "}",
                  "",
                  "// Set the current driver number based on initial_count",
                  "pm.variables.set(\"currentDriverNumber\", driverNumbers[initial_count - 1]);",
                  "",
                  "// Simulate a delay",
                  "setTimeout(function(){}, 500);",
                  ""
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "bfd56eda-3584-4dc4-9671-b305b18ecfbb"
              }
            }
          ],
          "id": "6a8d43b4-10d7-485e-a3c7-7a9586074dac",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json;charset=utf-8"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"mobileNumber\": \"{{currentDriverNumber}}\",\n    \"mobileCountryCode\": \"+91\",\n    \"merchantId\": \"7f7896dd-787e-4a0b-8675-e9e6fe93bb8f\",\n    \"merchantOperatingCity\": \"Bangalore\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseURL_namma_P}}/auth",
              "host": [
                "{{baseURL_namma_P}}"
              ],
              "path": [
                "auth"
              ]
            }
          },
          "response": [],
          "uid": "38579165-6a8d43b4-10d7-485e-a3c7-7a9586074dac"
        },
        {
          "name": ":authId/verify driver current Ride",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "  pm.test(\"Verify whether Status code is 200\", function () {",
                  "    console.log(\"Request:\", pm.request);",
                  "    console.log(\"Response Body:\", pm.response.text());",
                  "",
                  "    try {",
                  "        pm.response.to.have.status(200);",
                  "        } ",
                  "    catch (error) {",
                  "        console.log(\"Status Code is not 200: It is \", pm.response.code);",
                  "        pm.collectionVariables.set(\"initial_count\", 1);",
                  "        throw new Error(\"Status Code is not 200\");",
                  "    }",
                  "});",
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "let initial_count = pm.collectionVariables.get(\"initial_count\")",
                  "let driver_tokens = pm.environment.get('driver_tokens');",
                  "let driver_ids = pm.collectionVariables.get(\"driver_ids\")",
                  "",
                  "",
                  "// Retrieve the array from collection variables and parse it",
                  "if (driver_tokens) ",
                  "{",
                  "    driver_tokens = JSON.parse(driver_tokens);",
                  "} ",
                  "else ",
                  "{",
                  "    driver_tokens = [];",
                  "}",
                  "",
                  "if(driver_ids)",
                  "{",
                  "    driver_ids = JSON.parse(driver_ids);",
                  "}",
                  "else",
                  "{",
                  "    driver_ids = [];",
                  "}",
                  "",
                  "driver_tokens.push(jsonData.token);",
                  "driver_ids.push(jsonData.person.id)",
                  "",
                  "//Printing DriverIds",
                  "console.log(\"Driver \"+initial_count+\" id \"+jsonData.person.id)",
                  "",
                  "",
                  "// Convert the updated array back to a JSON string",
                  "pm.environment.set(\"driver_tokens\", JSON.stringify(driver_tokens));",
                  "pm.collectionVariables.set(\"driver_ids\",JSON.stringify(driver_ids));",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "7efe9119-2e7f-42fb-a323-4e36752c218f"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var initial_count = pm.collectionVariables.get(\"initial_count\")",
                  "let driverAuthIds = JSON.parse(pm.collectionVariables.get(\"driverAuthIds\"))",
                  "",
                  "pm.variables.set(\"driverAuthId\",driverAuthIds[initial_count-1])",
                  "",
                  "if(initial_count==1)",
                  "{   ",
                  "    pm.collectionVariables.set(\"driver_ids\",JSON.stringify([]))",
                  "    pm.environment.set(\"driver_tokens\", JSON.stringify([]));",
                  "}",
                  "",
                  "setTimeout(function(){},500)"
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "c84838fb-c17f-4d14-a711-5632c87d5add"
              }
            }
          ],
          "id": "7d2625f8-ed95-4909-b8c0-50ffa5f0525a",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json;charset=utf-8"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"otp\": \"7891\",\n    \"deviceToken\": \"5490073d-10ca-42f3-8a32-22de4c916026\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseURL_namma_P}}/auth/:authId/verify",
              "host": [
                "{{baseURL_namma_P}}"
              ],
              "path": [
                "auth",
                ":authId",
                "verify"
              ],
              "variable": [
                {
                  "id": "c55c6d1b-3c19-46a8-bfba-0901c43a088c",
                  "key": "authId",
                  "value": "{{driverAuthId}}",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": [],
          "uid": "38579165-7d2625f8-ed95-4909-b8c0-50ffa5f0525a"
        },
        {
          "name": "/driver/setActivity current Ride",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "var initial_count = pm.collectionVariables.get(\"initial_count\")",
                  "",
                  "  pm.test(\"Verify whether Status code is 200\", function () {",
                  "    console.log(\"Request:\", pm.request);",
                  "    console.log(\"Response Body:\", pm.response.text());",
                  "",
                  "    try {",
                  "        pm.response.to.have.status(200);",
                  "        } ",
                  "    catch (error) {",
                  "        console.log(\"Status Code is not 200: It is \", pm.response.code);",
                  "        pm.collectionVariables.set(\"initial_count\", 1);",
                  "        throw new Error(\"Status Code is not 200\");",
                  "    }",
                  "});",
                  ""
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "5dcb6c70-838b-4ca4-92a0-c13ce697190b"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var initial_count = parseInt(pm.collectionVariables.get(\"initial_count\"));",
                  "",
                  "function driverModessplit() {",
                  "    var driverModes = data[\"initialRideDriversMode\"];",
                  "    var commaSeparation = driverModes.split(\",\");",
                  "    var modes = commaSeparation.map(function(number){",
                  "        return number.trim();",
                  "    });",
                  "    console.log(modes);",
                  "    pm.collectionVariables.set(\"driverModes\", JSON.stringify(modes));",
                  "}",
                  "if(initial_count==1)",
                  "    driverModessplit();",
                  "",
                  "// Parse the JSON string back into an array",
                  "let driverModes = JSON.parse(pm.collectionVariables.get(\"driverModes\"));",
                  "let driver_tokens = JSON.parse(pm.environment.get(\"driver_tokens\"))",
                  "pm.variables.set(\"driver_Token\", driver_tokens[initial_count-1])",
                  "",
                  "// Set the current driver number based on initial_count",
                  "pm.variables.set(\"driverMode\", driverModes[initial_count - 1].toUpperCase())",
                  "",
                  "// Simulate a delay",
                  "setTimeout(function(){}, 500);",
                  ""
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "7baa7dcd-159d-4621-9ba2-ecddb2f0678e"
              }
            }
          ],
          "id": "72a147ab-49ea-4314-88fb-7da09961ff41",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "value",
                  "value": "{{driver_Token}}",
                  "type": "string"
                },
                {
                  "key": "key",
                  "value": "token",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json;charset=utf-8"
              }
            ],
            "url": {
              "raw": "{{baseURL_namma_P}}/driver/setActivity?active=true&mode=\"{{driverMode}}\"",
              "host": [
                "{{baseURL_namma_P}}"
              ],
              "path": [
                "driver",
                "setActivity"
              ],
              "query": [
                {
                  "key": "active",
                  "value": "true"
                },
                {
                  "key": "mode",
                  "value": "\"{{driverMode}}\""
                }
              ]
            }
          },
          "response": [],
          "uid": "38579165-72a147ab-49ea-4314-88fb-7da09961ff41"
        },
        {
          "name": "/driver/location current Ride",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "let locationFlag = pm.collectionVariables.get(\"locationFlag\")",
                  "",
                  "pm.test(\"Verify whether Status code is 200\", function () {",
                  "    console.log(\"Request:\", pm.request);",
                  "",
                  "    try {",
                  "        pm.response.to.have.status(200);",
                  "        } ",
                  "    catch (error) {",
                  "        console.log(\"Status Code is not 200: It is \", pm.response.code);",
                  "        pm.collectionVariables.set(\"initial_count\", 1);",
                  "        throw new Error(\"Status Code is not 200\");",
                  "    }",
                  "});",
                  "",
                  "if(locationFlag==true)",
                  "{",
                  "    pm.execution.setNextRequest(\"/driver/nearbyRideRequest current Ride\")",
                  "    pm.collectionVariables.set(\"locationFlag\",false)",
                  "}",
                  ""
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "58b9ffc6-4716-46be-82d7-b6c340c8e2bc"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var moment = require('moment');",
                  "pm.collectionVariables.set(\"current_time\", moment.utc().format(\"YYYY-MM-DDTHH:mm:ssZ\"));",
                  "function driverLocationsplit() {",
                  "    var driverLocations = data[\"initialRideDriversLocation\"]; ",
                  "    var commaSeparation = driverLocations.split(\",\");",
                  "    var segregatedLocations = [];",
                  "    ",
                  "    // Loop through each comma-separated location",
                  "    for (var i = 0; i < commaSeparation.length; i++) {",
                  "    // Split each location by spaces and remove extra whitespace",
                  "    var latLon = commaSeparation[i].trim().split(/\\s+/);",
                  "    segregatedLocations.push(latLon);",
                  "    }",
                  "    pm.collectionVariables.set(\"driverLocations\", JSON.stringify(segregatedLocations));",
                  "}",
                  "driverLocationsplit();",
                  "// Parse the JSON string back into an array",
                  "let driverLocations = JSON.parse(pm.collectionVariables.get(\"driverLocations\"));",
                  "var initial_count = parseInt(pm.collectionVariables.get(\"initial_count\"));",
                  "",
                  "let driver_tokens = JSON.parse(pm.environment.get(\"driver_tokens\"))",
                  "pm.variables.set(\"driver_Token\", driver_tokens[initial_count-1])",
                  "",
                  "// Set the current driver number based on initial_count",
                  "pm.variables.set(\"driver_lat\", driverLocations[initial_count - 1][0])",
                  "pm.variables.set(\"driver_lon\", driverLocations[initial_count - 1][1])",
                  "// Simulate a delay",
                  "setTimeout(function(){}, 1000);"
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "3cd2b930-7876-47da-a5a6-f83c94618dc2"
              }
            }
          ],
          "id": "c88fd727-134e-4152-a412-96efc16cb22e",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "value",
                  "value": "{{driver_Token}}",
                  "type": "string"
                },
                {
                  "key": "key",
                  "value": "token",
                  "type": "string"
                },
                {
                  "key": "in",
                  "value": "header",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json;charset=utf-8"
              },
              {
                "key": "vt",
                "value": "AUTO_RICKSHAW"
              },
              {
                "key": "mId",
                "value": "7f7896dd-787e-4a0b-8675-e9e6fe93bb8f"
              },
              {
                "key": "dm",
                "value": "ONLINE"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\n    {\n        \"pt\": {\n            \"lat\": {{driver_lat}},\n            \"lon\": {{driver_lon}}\n        },\n        \"ts\": \"{{current_time}}\"\n    },\n        {\n        \"pt\": {\n            \"lat\": {{driver_lat}},\n            \"lon\": {{driver_lon}}\n        },\n        \"ts\": \"{{current_time}}\"\n    },\n        {\n        \"pt\": {\n            \"lat\": {{driver_lat}},\n            \"lon\": {{driver_lon}}\n        },\n        \"ts\": \"{{current_time}}\"\n    },    {\n        \"pt\": {\n            \"lat\": {{driver_lat}},\n            \"lon\": {{driver_lon}}\n        },\n        \"ts\": \"{{current_time}}\"\n    },    {\n        \"pt\": {\n            \"lat\": {{driver_lat}},\n            \"lon\": {{driver_lon}}\n        },\n        \"ts\": \"{{current_time}}\"\n    }\n]",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseURL_namma_P}}/driver/location",
              "host": [
                "{{baseURL_namma_P}}"
              ],
              "path": [
                "driver",
                "location"
              ]
            }
          },
          "response": [],
          "uid": "38579165-c88fd727-134e-4152-a412-96efc16cb22e"
        },
        {
          "name": "/driver/profile current Ride",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var initial_count = pm.collectionVariables.get(\"initial_count\")",
                  "let driver_tokens = JSON.parse(pm.environment.get(\"driver_tokens\"))",
                  "",
                  "pm.variables.set(\"driver_Token\",driver_tokens[initial_count-1])",
                  "setTimeout(function(){},2000)"
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "ce2df98d-5992-48ad-8747-0157f57e5211"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "var initial_count = pm.collectionVariables.get(\"initial_count\")",
                  "",
                  "  pm.test(\"Verify whether Status code is 200\", function () {",
                  "    console.log(\"Request:\", pm.request);",
                  "    console.log(\"Response Body:\", pm.response.text());",
                  "",
                  "    try {",
                  "        pm.response.to.have.status(200);",
                  "        } ",
                  "    catch (error) {",
                  "        console.log(\"Status Code is not 200: It is \", pm.response.code);",
                  "        pm.collectionVariables.set(\"initial_count\", 1);",
                  "        throw new Error(\"Status Code is not 200\");",
                  "    }",
                  "});",
                  "",
                  "",
                  "",
                  "pm.test(\"Validating whether the driver is not on ride\", function(){",
                  "    var obj = JSON.parse(responseBody);",
                  "    pm.expect(obj.onRide).to.be.false;",
                  "    if(obj.onRide==true)",
                  "    {   postman.setNextRequest(\"driver/ride/list\")",
                  "        throw Error(\"Driver is on Ride\");",
                  "    }",
                  "})",
                  "",
                  ""
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "3469ec18-3853-4138-98b1-d342feacf53d"
              }
            }
          ],
          "id": "a459d585-ede1-4066-b0b6-78423c8029fc",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "value",
                  "value": "{{driver_Token}}",
                  "type": "string"
                },
                {
                  "key": "key",
                  "value": "token",
                  "type": "string"
                },
                {
                  "key": "in",
                  "value": "header",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "token",
                "value": "60819053-f00e-4993-bbde-df2669b3c0db"
              }
            ],
            "url": {
              "raw": "{{baseURL_namma_P}}/driver/profile",
              "host": [
                "{{baseURL_namma_P}}"
              ],
              "path": [
                "driver",
                "profile"
              ]
            }
          },
          "response": [],
          "uid": "38579165-a459d585-ede1-4066-b0b6-78423c8029fc"
        },
        {
          "name": "/driver/profile current Ride",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var initial_count = pm.collectionVariables.get(\"initial_count\")",
                  "let driver_tokens = JSON.parse(pm.environment.get(\"driver_tokens\"))",
                  "",
                  "pm.variables.set(\"driver_Token\",driver_tokens[initial_count-1])",
                  "setTimeout(function(){},2000)"
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "21951abc-890c-4625-8028-f18ee1b3cbab"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "var initial_count = pm.collectionVariables.get(\"initial_count\")",
                  "",
                  "  pm.test(\"Verify whether Status code is 200\", function () {",
                  "    console.log(\"Request:\", pm.request);",
                  "    console.log(\"Response Body:\", pm.response.text());",
                  "",
                  "    try {",
                  "        pm.response.to.have.status(200);",
                  "        } ",
                  "    catch (error) {",
                  "        console.log(\"Status Code is not 200: It is \", pm.response.code);",
                  "        pm.collectionVariables.set(\"initial_count\", 1);",
                  "        throw new Error(\"Status Code is not 200\");",
                  "    }",
                  "});",
                  "",
                  "",
                  "",
                  "pm.test(\"Validating whether the driver is not on ride\", function(){",
                  "    var obj = JSON.parse(responseBody);",
                  "    pm.expect(obj.onRide).to.be.false;",
                  "    if(obj.onRide==true)",
                  "    {   postman.setNextRequest(\"driver/ride/list\")",
                  "        throw Error(\"Driver is on Ride\");",
                  "    }",
                  "})",
                  "",
                  ""
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "68302bdc-6cc1-4bf7-9d32-9a19c8a78a59"
              }
            }
          ],
          "id": "33e02dad-86d8-48a5-8a74-7b0d6dcb36e1",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "value",
                  "value": "{{driver_Token}}",
                  "type": "string"
                },
                {
                  "key": "key",
                  "value": "token",
                  "type": "string"
                },
                {
                  "key": "in",
                  "value": "header",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "token",
                "value": "60819053-f00e-4993-bbde-df2669b3c0db"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"isAdvancedBookingEnabled\": true\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseURL_namma_P}}/driver/profile/info",
              "host": [
                "{{baseURL_namma_P}}"
              ],
              "path": [
                "driver",
                "profile",
                "info"
              ]
            }
          },
          "response": [],
          "uid": "38579165-33e02dad-86d8-48a5-8a74-7b0d6dcb36e1"
        },
        {
          "name": "/auth customer current Ride",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "  pm.test(\"Verify whether Status code is 200\", function () {",
                  "    console.log(\"Request:\", pm.request);",
                  "    console.log(\"Response Body:\", pm.response.text());",
                  "",
                  "    try {",
                  "        pm.response.to.have.status(200);",
                  "        } ",
                  "    catch (error) {",
                  "        console.log(\"Status Code is not 200: It is \", pm.response.code);",
                  "        pm.collectionVariables.set(\"initial_count\", 1);",
                  "        throw new Error(\"Status Code is not 200\");",
                  "    }",
                  "});",
                  "",
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "var initial_count = pm.collectionVariables.get(\"initial_count\");",
                  "let customerAuthIds = pm.collectionVariables.get('customerAuthIds');",
                  "",
                  "// Retrieve the array from collection variables and parse it",
                  "if (customerAuthIds) ",
                  "{",
                  "    customerAuthIds = JSON.parse(customerAuthIds);",
                  "} ",
                  "",
                  "else ",
                  "{",
                  "    customerAuthIds = [];",
                  "}",
                  "",
                  "customerAuthIds.push(jsonData.authId);",
                  "",
                  "// Convert the updated array back to a JSON string",
                  "pm.collectionVariables.set(\"customerAuthIds\", JSON.stringify(customerAuthIds));",
                  "",
                  ""
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "0c8d6453-bb0a-46a0-9cf2-4f14a3c58db6"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var initial_count = parseInt(pm.collectionVariables.get(\"initial_count\"));",
                  "function customerNumbersplit() {",
                  "    var customerNumbers = data[\"initialRideUserNumbers\"]; ",
                  "    var commaSeperation = customerNumbers.split(\",\");",
                  "    var trimmedCustomerNumbers = commaSeperation.map(function(number) {",
                  "        return number.trim();",
                  "    });",
                  "    pm.collectionVariables.set(\"customerNumbers\", JSON.stringify(trimmedCustomerNumbers));",
                  "}",
                  "if(initial_count==1)",
                  "    customerNumbersplit();",
                  "",
                  "// Parse the JSON string back into an array",
                  "let customerNumbers = JSON.parse(pm.collectionVariables.get(\"customerNumbers\"));",
                  "",
                  "pm.collectionVariables.set(\"totalCustomerNumbers\", customerNumbers.length);",
                  "var totalCustomerNumbers = pm.collectionVariables.get(\"totalCustomerNumbers\");",
                  "console.log(totalCustomerNumbers+\" TotalCustNumbers\");",
                  "",
                  "if (initial_count == 1) {",
                  "    pm.collectionVariables.set(\"customerAuthIds\", JSON.stringify([]));",
                  "}",
                  "",
                  "// Set the current driver number based on initial_count",
                  "pm.variables.set(\"currentCustomerNumber\", customerNumbers[initial_count - 1]);",
                  "",
                  "// Simulate a delay",
                  "setTimeout(function(){}, 1000);",
                  ""
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "a033d3c8-8ce7-4881-ac31-ef392d26ceee"
              }
            }
          ],
          "id": "1707dbfc-460f-43bb-aebe-eced153c0930",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json;charset=utf-8"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"mobileNumber\": \"{{currentCustomerNumber}}\",\n    \"mobileCountryCode\": \"+91\",\n    \"merchantId\" : \"NAMMA_YATRI\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl_app}}/auth",
              "host": [
                "{{baseUrl_app}}"
              ],
              "path": [
                "auth"
              ]
            }
          },
          "response": [],
          "uid": "38579165-1707dbfc-460f-43bb-aebe-eced153c0930"
        },
        {
          "name": ":authId/verify customer current Ride",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "  pm.test(\"Verify whether Status code is 200\", function () {",
                  "    console.log(\"Request:\", pm.request);",
                  "    console.log(\"Response Body:\", pm.response.text());",
                  "",
                  "    try {",
                  "        pm.response.to.have.status(200);",
                  "        } ",
                  "    catch (error) {",
                  "        console.log(\"Status Code is not 200: It is \", pm.response.code);",
                  "        pm.collectionVariables.set(\"initial_count\", 1);",
                  "        throw new Error(\"Status Code is not 200\");",
                  "    }",
                  "});",
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "var initial_count = pm.collectionVariables.get(\"initial_count\");",
                  "var totalCustomerNumbers = pm.collectionVariables.get(\"totalCustomerNumbers\");",
                  "let customerTokens = pm.collectionVariables.get('customerTokens');",
                  "let customerIds = pm.collectionVariables.get(\"customerIds\")",
                  "",
                  "// Retrieve the array from collection variables and parse it",
                  "",
                  "",
                  "",
                  "if (customerTokens) ",
                  "{",
                  "    customerTokens = JSON.parse(customerTokens);",
                  "} ",
                  "else ",
                  "{",
                  "    customerTokens = [];",
                  "}",
                  "",
                  "if (customerIds) ",
                  "{",
                  "    customerIds = JSON.parse(customerIds);",
                  "} ",
                  "else ",
                  "{",
                  "    customerIds = [];",
                  "}",
                  "",
                  "customerTokens.push(jsonData.token);",
                  "customerIds.push(jsonData.person.id)",
                  "//Printing DriverIds",
                  "console.log(\"Customer \"+initial_count+\" id \"+jsonData.person.id)",
                  "",
                  "",
                  "// Convert the updated array back to a JSON string",
                  "pm.collectionVariables.set(\"customerTokens\", JSON.stringify(customerTokens));",
                  "pm.collectionVariables.set(\"customerIds\",JSON.stringify(customerIds));",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "4cc3f45c-0323-41a1-a118-229de8bdfa74"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var initial_count = pm.collectionVariables.get(\"initial_count\")",
                  "let customerAuthIds = JSON.parse(pm.collectionVariables.get(\"customerAuthIds\"))",
                  "",
                  "pm.variables.set(\"customerAuthId\",customerAuthIds[initial_count-1])",
                  "",
                  "if(initial_count==1)",
                  "{   ",
                  "    pm.collectionVariables.set(\"customerIds\",JSON.stringify([]))",
                  "    pm.collectionVariables.set(\"customerTokens\", JSON.stringify([]));",
                  "}",
                  "",
                  "setTimeout(function(){},1000)"
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "894301d6-5d94-418e-8a09-f7017c3b9b00"
              }
            }
          ],
          "id": "5e922212-56cd-42c9-b008-d65b6cad3801",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json;charset=utf-8"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"otp\": \"7891\",\n    \"deviceToken\": \"1183b4uc-00a1-9306-000d-272\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl_app}}/auth/:authId/verify",
              "host": [
                "{{baseUrl_app}}"
              ],
              "path": [
                "auth",
                ":authId",
                "verify"
              ],
              "variable": [
                {
                  "id": "14f787f0-a85f-484c-971c-a49efbb4af5f",
                  "key": "authId",
                  "value": "{{customerAuthId}}",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": [],
          "uid": "38579165-5e922212-56cd-42c9-b008-d65b6cad3801"
        },
        {
          "name": "/driver/location current Ride",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "let locationFlag = pm.collectionVariables.get(\"locationFlag\")",
                  "",
                  "pm.test(\"Verify whether Status code is 200\", function () {",
                  "    console.log(\"Request:\", pm.request);",
                  "    try {",
                  "        pm.response.to.have.status(200);",
                  "        } ",
                  "    catch (error) {",
                  "        console.log(\"Status Code is not 200: It is \", pm.response.code);",
                  "        pm.collectionVariables.set(\"initial_count\", 1);",
                  "        throw new Error(\"Status Code is not 200\");",
                  "    }",
                  "});",
                  "",
                  "if(locationFlag==true)",
                  "{",
                  "    pm.execution.setNextRequest(\"/driver/nearbyRideRequest current Ride\")",
                  "    pm.collectionVariables.set(\"locationFlag\",false)",
                  "}",
                  ""
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "c7e5d7d7-8dbb-41dd-b131-85080afc8690"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var moment = require('moment');",
                  "pm.collectionVariables.set(\"current_time\", moment.utc().format(\"YYYY-MM-DDTHH:mm:ssZ\"));",
                  "function driverLocationsplit() {",
                  "    var driverLocations = data[\"initialRideDriversLocation\"]; ",
                  "    var commaSeparation = driverLocations.split(\",\");",
                  "    var segregatedLocations = [];",
                  "    ",
                  "    // Loop through each comma-separated location",
                  "    for (var i = 0; i < commaSeparation.length; i++) {",
                  "    // Split each location by spaces and remove extra whitespace",
                  "    var latLon = commaSeparation[i].trim().split(/\\s+/);",
                  "    segregatedLocations.push(latLon);",
                  "    }",
                  "    pm.collectionVariables.set(\"driverLocations\", JSON.stringify(segregatedLocations));",
                  "}",
                  "driverLocationsplit();",
                  "// Parse the JSON string back into an array",
                  "let driverLocations = JSON.parse(pm.collectionVariables.get(\"driverLocations\"));",
                  "var initial_count = parseInt(pm.collectionVariables.get(\"initial_count\"));",
                  "",
                  "let driver_tokens = JSON.parse(pm.environment.get(\"driver_tokens\"))",
                  "pm.variables.set(\"driver_Token\", driver_tokens[initial_count-1])",
                  "",
                  "// Set the current driver number based on initial_count",
                  "pm.variables.set(\"driver_lat\", driverLocations[initial_count - 1][0])",
                  "pm.variables.set(\"driver_lon\", driverLocations[initial_count - 1][1])",
                  "// Simulate a delay",
                  "setTimeout(function(){}, 1000);"
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "129ff7ce-03fa-4b6c-84bd-11d3ade5139f"
              }
            }
          ],
          "id": "e6a14081-95d3-4e05-bb6c-f3242eb609d2",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "value",
                  "value": "{{driver_Token}}",
                  "type": "string"
                },
                {
                  "key": "key",
                  "value": "token",
                  "type": "string"
                },
                {
                  "key": "in",
                  "value": "header",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json;charset=utf-8"
              },
              {
                "key": "vt",
                "value": "AUTO_RICKSHAW"
              },
              {
                "key": "mId",
                "value": "7f7896dd-787e-4a0b-8675-e9e6fe93bb8f"
              },
              {
                "key": "dm",
                "value": "ONLINE"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\n    {\n        \"pt\": {\n            \"lat\": {{driver_lat}},\n            \"lon\": {{driver_lon}}\n        },\n        \"ts\": \"{{current_time}}\"\n    },\n        {\n        \"pt\": {\n            \"lat\": {{driver_lat}},\n            \"lon\": {{driver_lon}}\n        },\n        \"ts\": \"{{current_time}}\"\n    },\n        {\n        \"pt\": {\n            \"lat\": {{driver_lat}},\n            \"lon\": {{driver_lon}}\n        },\n        \"ts\": \"{{current_time}}\"\n    },    {\n        \"pt\": {\n            \"lat\": {{driver_lat}},\n            \"lon\": {{driver_lon}}\n        },\n        \"ts\": \"{{current_time}}\"\n    },    {\n        \"pt\": {\n            \"lat\": {{driver_lat}},\n            \"lon\": {{driver_lon}}\n        },\n        \"ts\": \"{{current_time}}\"\n    }\n]",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseURL_namma_P}}/driver/location",
              "host": [
                "{{baseURL_namma_P}}"
              ],
              "path": [
                "driver",
                "location"
              ]
            }
          },
          "response": [],
          "uid": "38579165-e6a14081-95d3-4e05-bb6c-f3242eb609d2"
        },
        {
          "name": "/rideSearch currentRide",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const body = JSON.parse(responseBody);",
                  "",
                  "  pm.test(\"Verify whether Status code is 200\", function () {",
                  "    console.log(\"Request:\", pm.request);",
                  "    console.log(\"Response Body:\", pm.response.text());",
                  "",
                  "    try {",
                  "        pm.response.to.have.status(200);",
                  "        } ",
                  "    catch (error) {",
                  "        console.log(\"Status Code is not 200: It is \", pm.response.code);",
                  "        pm.collectionVariables.set(\"initial_count\", 1);",
                  "        throw new Error(\"Status Code is not 200\");",
                  "    }",
                  "});",
                  "",
                  "",
                  "pm.collectionVariables.set(\"ride_searchId\", body.searchId);",
                  "",
                  "",
                  "",
                  "",
                  " "
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "45030b13-34b8-4a53-b1fe-49d20718c7b2"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var moment = require('moment');",
                  "pm.collectionVariables.set(\"current_time\", moment.utc().format(\"YYYY-MM-DDTHH:mm:ssZ\"));",
                  "var initial_count = parseInt(pm.collectionVariables.get(\"initial_count\"));",
                  "",
                  "function userLocationsplit() {",
                  "    var sourceLocations = data[\"initialRideSourceLocations\"]; ",
                  "    var destinationLocations = data[\"initialRideDestinationLocations\"]",
                  "    var sourceLocationcommaSeparation = sourceLocations.split(\",\");",
                  "    var destinationLocationcommaSeperation = destinationLocations.split(\",\");",
                  "    ",
                  "    var segregatedSourceLocations = [];",
                  "    var segregatedDestLocations =[];",
                  "    ",
                  "    for (var i = 0; i < sourceLocationcommaSeparation.length; i++) {",
                  "",
                  "    var latLon = sourceLocationcommaSeparation[i].trim().split(/\\s+/);",
                  "    segregatedSourceLocations.push(latLon);",
                  "    }",
                  "     for (var i = 0; i < destinationLocationcommaSeperation.length; i++) {",
                  "    var latLon = destinationLocationcommaSeperation[i].trim().split(/\\s+/);",
                  "    segregatedDestLocations.push(latLon);",
                  "    }",
                  "    pm.collectionVariables.set(\"initialRideSourceLocations\", JSON.stringify(segregatedSourceLocations));",
                  "    pm.collectionVariables.set(\"initialRideDestLocations\",JSON.stringify(segregatedDestLocations));",
                  "}",
                  "",
                  "if(initial_count==1)",
                  "    userLocationsplit();",
                  "",
                  "// Parse the JSON string back into an array",
                  "let initialRideSourceLocations = JSON.parse(pm.collectionVariables.get(\"initialRideSourceLocations\"));",
                  "let initialRideDestLocations = JSON.parse(pm.collectionVariables.get(\"initialRideDestLocations\"));",
                  "",
                  "",
                  "let customerTokens = JSON.parse(pm.collectionVariables.get(\"customerTokens\"))",
                  "pm.variables.set(\"customer_Token\", customerTokens[initial_count-1])",
                  "",
                  "",
                  "pm.variables.set(\"user_Lat\", initialRideSourceLocations[initial_count - 1][0])",
                  "pm.variables.set(\"user_Lon\", initialRideSourceLocations[initial_count - 1][1])",
                  "",
                  "pm.variables.set(\"destination_Lat\", initialRideDestLocations[initial_count - 1][0])",
                  "pm.variables.set(\"destination_Lon\", initialRideDestLocations[initial_count - 1][1])",
                  "",
                  "// Simulate a delay",
                  "setTimeout(function(){}, 6000);",
                  ""
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "1027a97d-c316-47d9-8d83-f51d79d8970e"
              }
            }
          ],
          "id": "a22f1681-d7c3-4d04-ac7b-4b56e89ea9a9",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "value",
                  "value": "{{customer_Token}}",
                  "type": "string"
                },
                {
                  "key": "key",
                  "value": "token",
                  "type": "string"
                },
                {
                  "key": "in",
                  "value": "header",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json;charset=utf-8"
              },
              {
                "key": "token",
                "value": "{{app-reg-token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"fareProductType\": \"ONE_WAY\",\n    \"contents\": {\n        \"origin\": {\n            \"address\": {\n                \"area\": \"8th Block Koramangala\",\n                \"areaCode\": \"560047\",\n                \"building\": \"Juspay Buildings\",\n                \"city\": \"Bangalore\",\n                \"country\": \"India\",\n                \"door\": \"#444\",\n                \"street\": \"18th Main\",\n                \"state\": \"Karnataka\"\n            },\n            \"gps\": {\n                \"lat\": {{user_Lat}},\n                \"lon\": {{user_Lon}}\n            }\n        },\n        \"destination\": {\n            \"address\": {\n                \"area\": \"6th Block Koramangala\",\n                \"areaCode\": \"560047\",\n                \"building\": \"Juspay Apartments\",\n                \"city\": \"Bangalore\",\n                \"country\": \"India\",\n                \"door\": \"#444\",\n                \"street\": \"18th Main\",\n                \"state\": \"Karnataka\"\n            },\n            \"gps\": {\n                \"lat\": {{destination_Lat}},\n                \"lon\": {{destination_Lon}}\n            }\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl_app}}/rideSearch",
              "host": [
                "{{baseUrl_app}}"
              ],
              "path": [
                "rideSearch"
              ]
            }
          },
          "response": [],
          "uid": "38579165-a22f1681-d7c3-4d04-ac7b-4b56e89ea9a9"
        },
        {
          "name": "/rideSearch/:searchId/results currentRide",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const jsonData = JSON.parse(responseBody);",
                  " pm.collectionVariables.set(\"retryFlag\",true)",
                  "  pm.test(\"Verify whether Status code is 200\", function () {",
                  "    console.log(\"Request:\", pm.request);",
                  "    console.log(\"Response Body:\", pm.response.text());",
                  "",
                  "    try {",
                  "        pm.response.to.have.status(200);",
                  "        } ",
                  "    catch (error) {",
                  "        console.log(\"Status Code is not 200: It is \", pm.response.code);",
                  "        pm.collectionVariables.set(\"initial_count\", 1);",
                  "        throw new Error(\"Status Code is not 200\");",
                  "    }",
                  "});",
                  "",
                  "let estimatesRetryCount = pm.collectionVariables.get(\"estimatesRetryCount\");",
                  "let estimateslen = jsonData.estimates.length;",
                  "",
                  "if(estimatesRetryCount == null || estimatesRetryCount == undefined)",
                  "{",
                  "  estimatesRetryCount = 0;",
                  "  pm.collectionVariables.set(\"estimatesRetryCount\",estimatesRetryCount)",
                  "}",
                  "",
                  "if (responseCode.code !== 200  ||  jsonData.estimates.length==0) ",
                  "{  ",
                  "    if(jsonData.estimates.length==0 && estimatesRetryCount < 7)",
                  "    {",
                  "       postman.setNextRequest(\"/rideSearch/:searchId/results currentRide\")",
                  "       pm.collectionVariables.set(\"estimatesRetryCount\",estimatesRetryCount+=1)",
                  "       setTimeout(function(){},3000)",
                  "    }",
                  "    else",
                  "    { ",
                  "      console.error(\"No estimates\")",
                  "      pm.collectionVariables.set(\"initial_count\", 1)",
                  "      postman.setNextRequest(null);",
                  "      pm.collectionVariables.set(\"estimatesRetryCount\",0)",
                  "    }",
                  "}",
                  "else ",
                  "{",
                  "for (let i = 0; i < estimateslen; i++)",
                  "{    ",
                  " if ( (jsonData.estimates[i].agencyName === \"NAMMA_YATRI\") && (jsonData.estimates[i].vehicleVariant === \"AUTO_RICKSHAW\")) {",
                  "    pm.collectionVariables.set(\"EstiAuto\", jsonData.estimates[i].id);",
                  "    pm.collectionVariables.set(\"retryFlag\",false)",
                  "    console.log(jsonData.estimates[i].id + \" AutoEstimateId\")",
                  " }",
                  " else if ((jsonData.estimates[i].agencyName === \"NAMMA_YATRI\") && (jsonData.estimates[i].vehicleVariant === \"SUV\")) {",
                  "   pm.collectionVariables.set(\"Estisuv\", jsonData.estimates[i].id);",
                  "   console.log(jsonData.estimates[i].id + \"SUVEstimateId\")",
                  "  }",
                  "",
                  " else if ( (jsonData.estimates[i].agencyName === \"NAMMA_YATRI\") && (jsonData.estimates[i].vehicleVariant === \"SEDAN\")) {",
                  "",
                  "    pm.collectionVariables.set(\"EstiSedan\", jsonData.estimates[i].id);",
                  "    console.log(jsonData.estimates[i].id + \"SedanEstimateId\")",
                  "  }",
                  "",
                  " else if ( (jsonData.estimates[i].agencyName === \"NAMMA_YATRI\") && (jsonData.estimates[i].vehicleVariant === \"HATCHBACK\")) {",
                  "    pm.collectionVariables.set(\"EstiHatch\", jsonData.estimates[i].id);",
                  "    console.log(jsonData.estimates[i].id + \"HatchbackEstimateId\")",
                  "  }",
                  "",
                  " else if ( (jsonData.estimates[i].agencyName === \"NAMMA_YATRI\") && (jsonData.estimates[i].vehicleVariant === \"TAXI\")) {",
                  "    pm.collectionVariables.set(\"EstiTaxi\", jsonData.estimates[i].id);",
                  "    console.log(jsonData.estimates[i].id + \"TaxiEstimateId\")",
                  "   }",
                  "}",
                  "}",
                  "",
                  "if(pm.collectionVariables.get(\"retryFlag\")===true && estimatesRetryCount < 7)",
                  "{",
                  "    postman.setNextRequest(\"/rideSearch/:searchId/results currentRide\")",
                  "    pm.collectionVariables.set(\"estimatesRetryCount\",estimatesRetryCount+=1)",
                  "    setTimeout(function(){},3000)",
                  "}",
                  "",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "797a5707-4e66-4767-abfc-bb09b8e83144"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "let customerTokens = JSON.parse(pm.collectionVariables.get(\"customerTokens\"))",
                  "let initial_count = pm.collectionVariables.get(\"initial_count\")",
                  "pm.variables.set(\"customer_Token\", customerTokens[initial_count-1])"
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "87b74cbd-eb92-44a9-b784-b44711f4e255"
              }
            }
          ],
          "id": "f9e353a3-1b92-4719-bb7a-619b30c6df7b",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "value",
                  "value": "{{customer_Token}}",
                  "type": "string"
                },
                {
                  "key": "key",
                  "value": "token",
                  "type": "string"
                },
                {
                  "key": "in",
                  "value": "header",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "token",
                "value": "{{app-reg-token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl_app}}/rideSearch/:searchId/results",
              "host": [
                "{{baseUrl_app}}"
              ],
              "path": [
                "rideSearch",
                ":searchId",
                "results"
              ],
              "variable": [
                {
                  "id": "b095ce3f-fc39-448e-94cf-6f7a8551bf10",
                  "key": "searchId",
                  "value": "{{ride_searchId}}"
                }
              ]
            }
          },
          "response": [],
          "uid": "38579165-f9e353a3-1b92-4719-bb7a-619b30c6df7b"
        },
        {
          "name": "/estimate/:estimateId/select",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "  pm.test(\"Verify whether Status code is 200\", function () {",
                  "    console.log(\"Request:\", pm.request);",
                  "    console.log(\"Response Body:\", pm.response.text());",
                  "",
                  "    try {",
                  "        pm.response.to.have.status(200);",
                  "        } ",
                  "    catch (error) {",
                  "        console.log(\"Status Code is not 200: It is \", pm.response.code);",
                  "        pm.collectionVariables.set(\"initial_count\", 1);",
                  "        postman.setNextRequest(null);",
                  "        throw new Error(\"Status Code is not 200\");",
                  "    }",
                  "});",
                  "",
                  ""
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "d9b672c9-ba43-48fe-bbb3-ed934a4e9076"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "let customerTokens = JSON.parse(pm.collectionVariables.get(\"customerTokens\"))",
                  "let initial_count = pm.collectionVariables.get(\"initial_count\")",
                  "pm.variables.set(\"customer_Token\", customerTokens[initial_count-1])",
                  "setTimeout(function(){},1500)"
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "a5ca961f-49f6-425a-8cc4-42e29e767bc5"
              }
            }
          ],
          "id": "1d0cbbb0-8b25-4b7d-9111-f99184e02101",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "value",
                  "value": "{{customer_Token}}",
                  "type": "string"
                },
                {
                  "key": "key",
                  "value": "token",
                  "type": "string"
                },
                {
                  "key": "in",
                  "value": "header",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"autoAssignEnabled\": true,\n    \"autoAssignEnabledV2\": true,\n    \"customerExtraFee\": null\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl_app}}/estimate/:estimateId/select2",
              "host": [
                "{{baseUrl_app}}"
              ],
              "path": [
                "estimate",
                ":estimateId",
                "select2"
              ],
              "variable": [
                {
                  "id": "1e23edb5-0d33-4a2c-9d9b-ce06e7f2904c",
                  "key": "estimateId",
                  "value": "{{EstiAuto}}"
                }
              ]
            }
          },
          "response": [],
          "uid": "38579165-1d0cbbb0-8b25-4b7d-9111-f99184e02101"
        },
        {
          "name": "/driver/nearbyRideRequest current Ride",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const body = JSON.parse(responseBody); ",
                  "",
                  "pm.test(\"Verify whether Status code is 200\", function () {",
                  "    console.log(\"Request:\", pm.request);",
                  "    console.log(\"Response Body:\", pm.response.text());",
                  "",
                  "    try {",
                  "        pm.response.to.have.status(200);",
                  "        } ",
                  "    catch (error) {",
                  "        console.log(\"Status Code is not 200: It is \", pm.response.code);",
                  "        pm.collectionVariables.set(\"initial_count\", 1);",
                  "        throw new Error(\"Status Code is not 200\");",
                  "    }",
                  "});",
                  "",
                  "const retry = 5",
                  "let count = pm.collectionVariables.get(\"ncrr_count\");",
                  "if (count == null || count == undefined) {",
                  "    count = 0;",
                  "    pm.collectionVariables.set(\"ncrr_count\", count);",
                  "}",
                  "if (body.searchRequestsForDriver.length != 0 || count > retry) {",
                  "    pm.collectionVariables.set(\"driverSearchTryId\", body.searchRequestsForDriver[0].searchTryId);",
                  "}",
                  "if (count <= retry && body.searchRequestsForDriver.length ==0) {",
                  "    count++;",
                  "    pm.collectionVariables.set(\"ncrr_count\", count);",
                  "    pm.execution.setNextRequest(\"/driver/location current Ride\");",
                  "    pm.collectionVariables.set(\"locationFlag\",true)",
                  "}",
                  "else if (count >retry)",
                  "{",
                  "    pm.collectionVariables.set(\"initial_count\",1)",
                  "    throw Error('Nearby Ride Request is not Received')",
                  "}",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "a2d449cc-58cb-41ab-b255-35cb75b7f859"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "let driverTokens = JSON.parse(pm.environment.get(\"driver_tokens\"))",
                  "let initial_count = parseInt(pm.collectionVariables.get(\"initial_count\"))",
                  "pm.variables.set(\"driver_Token\", driverTokens[initial_count-1])",
                  "setTimeout(function(){},3000)"
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "03e2ea41-a2d1-4e55-8599-ff77d5d993bc"
              }
            }
          ],
          "id": "a15890d1-0f73-4bf7-9e1a-1241b3aac9bd",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "value",
                  "value": "{{driver_Token}}",
                  "type": "string"
                },
                {
                  "key": "key",
                  "value": "token",
                  "type": "string"
                },
                {
                  "key": "in",
                  "value": "header",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "token",
                "value": "{{app-reg-token}}",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{baseURL_namma_P}}/driver/nearbyRideRequest",
              "host": [
                "{{baseURL_namma_P}}"
              ],
              "path": [
                "driver",
                "nearbyRideRequest"
              ]
            }
          },
          "response": [],
          "uid": "38579165-a15890d1-0f73-4bf7-9e1a-1241b3aac9bd"
        },
        {
          "name": "/driver/searchRequest/quote/offer",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const body = JSON.parse(responseBody); ",
                  "",
                  "pm.test(\"Verify whether Status code is 200\", function () {",
                  "    console.log(\"Request:\", pm.request);",
                  "    console.log(\"Response Body:\", pm.response.text());",
                  "",
                  "    try {",
                  "        pm.response.to.have.status(200);",
                  "        } ",
                  "    catch (error) {",
                  "        console.log(\"Status Code is not 200: It is \", pm.response.code);",
                  "        pm.collectionVariables.set(\"initial_count\", 1);",
                  "        throw new Error(\"Status Code is not 200\");",
                  "    }",
                  "});",
                  "",
                  "if (responseCode.code !== 200) ",
                  "{",
                  "    postman.setNextRequest(null);",
                  "}",
                  ""
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "da41c09c-e92e-4ca3-b7c7-fd25a7451d63"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var driverTokens = JSON.parse(pm.environment.get(\"driver_tokens\"));",
                  "let initial_count = parseInt(pm.collectionVariables.get(\"initial_count\"))",
                  "pm.variables.set(\"driver_Token\", driverTokens[initial_count-1])",
                  "setTimeout(function(){},2000)"
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "f07a5705-f2a1-49ac-858f-133b2a310daa"
              }
            }
          ],
          "id": "f5331037-90b0-4e58-a0af-fc05f384242c",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "value",
                  "value": "{{driver_Token}}",
                  "type": "string"
                },
                {
                  "key": "key",
                  "value": "token",
                  "type": "string"
                },
                {
                  "key": "in",
                  "value": "header",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n \"searchRequestId\": \"{{driverSearchTryId}}\",\n\n  \"offeredFare\": null\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseURL_namma_P}}/driver/searchRequest/quote/offer",
              "host": [
                "{{baseURL_namma_P}}"
              ],
              "path": [
                "driver",
                "searchRequest",
                "quote",
                "offer"
              ]
            }
          },
          "response": [],
          "uid": "38579165-f5331037-90b0-4e58-a0af-fc05f384242c"
        },
        {
          "name": "v2/rideBooking/list",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "",
                  "pm.test(\"Verify whether Status code is 200\", function () {",
                  "    console.log(\"Request:\", pm.request);",
                  "    console.log(\"Response Body:\", pm.response.text());",
                  "",
                  "    try {",
                  "        pm.response.to.have.status(200);",
                  "        } ",
                  "    catch (error) {",
                  "        console.log(\"Status Code is not 200: It is \", pm.response.code);",
                  "        pm.collectionVariables.set(\"initial_count\", 1);",
                  "        throw new Error(\"Status Code is not 200\");",
                  "    }",
                  "});",
                  "",
                  "if (responseCode.code !== 200) ",
                  "{",
                  "    postman.setNextRequest(null);",
                  "}",
                  "else",
                  "{",
                  "    let ot =  jsonData.list[0][\"rideList\"][0].rideOtp;",
                  "    pm.collectionVariables.set(\"userOtp\",ot.toString());",
                  "    pm.collectionVariables.set(\"userBookingId\",jsonData.list[0].id);",
                  "}",
                  "",
                  ""
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "03731c7c-575e-49c0-bcdd-35acf9954b28"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "let customerTokens = JSON.parse(pm.collectionVariables.get(\"customerTokens\"))",
                  "let initial_count = pm.collectionVariables.get(\"initial_count\")",
                  "pm.variables.set(\"customer_Token\", customerTokens[initial_count-1])",
                  "setTimeout(function(){},1000)"
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "d512d862-9d46-4897-9ab5-81335ced3775"
              }
            }
          ],
          "id": "97b7b5e2-3069-486e-ba91-36bf905c9970",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "value",
                  "value": "{{customer_Token}}",
                  "type": "string"
                },
                {
                  "key": "key",
                  "value": "token",
                  "type": "string"
                },
                {
                  "key": "in",
                  "value": "header",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl_app}}/rideBooking/list?limit=5",
              "host": [
                "{{baseUrl_app}}"
              ],
              "path": [
                "rideBooking",
                "list"
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "5"
                },
                {
                  "key": "onlyActive",
                  "value": "true",
                  "disabled": true
                }
              ]
            }
          },
          "response": [],
          "uid": "38579165-97b7b5e2-3069-486e-ba91-36bf905c9970"
        },
        {
          "name": "driver/ride/list",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "pm.test(\"Verify whether Status code is 200\", function () {",
                  "    console.log(\"Request:\", pm.request);",
                  "    console.log(\"Response Body:\", pm.response.text());",
                  "",
                  "    try {",
                  "        pm.response.to.have.status(200);",
                  "        } ",
                  "    catch (error) {",
                  "        console.log(\"Status Code is not 200: It is \", pm.response.code);",
                  "        pm.collectionVariables.set(\"initial_count\", 1);",
                  "        throw new Error(\"Status Code is not 200\");",
                  "    }",
                  "});",
                  "",
                  "if (responseCode.code !== 200) ",
                  "{",
                  "    postman.setNextRequest(null);",
                  "}",
                  "else",
                  "{",
                  "    pm.collectionVariables.set(\"driverRideId\", jsonData.list[0].id);",
                  "}",
                  "",
                  "let initial_count = pm.collectionVariables.get(\"initial_count\")",
                  "let driverSideOnRideIds = pm.environment.get('driverSideOnRideIds')",
                  "let driverSideRideStatus = pm.environment.get(\"driverSideRideStatus\")",
                  "",
                  "// Retrieve the array from collection variables and parse it",
                  "",
                  "",
                  "",
                  "if (driverSideOnRideIds) ",
                  "{",
                  "    driverSideOnRideIds = JSON.parse(driverSideOnRideIds);",
                  "} ",
                  "else ",
                  "{",
                  "    driverSideOnRideIds = [];",
                  "}",
                  "",
                  "if(driverSideRideStatus)",
                  "{",
                  "    driverSideRideStatus = JSON.parse(driverSideRideStatus);",
                  "}",
                  "else{",
                  "    driverSideRideStatus = [];",
                  "}",
                  "",
                  "driverSideOnRideIds.push(jsonData.list[0].id);",
                  "driverSideRideStatus.push(jsonData.list[0].status);",
                  "",
                  "// Convert the updated array back to a JSON string",
                  "pm.environment.set(\"driverSideOnRideIds\", JSON.stringify(driverSideOnRideIds))",
                  "pm.environment.set(\"driverSideRideStatus\",JSON.stringify(driverSideRideStatus))",
                  ""
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "3a142989-d5b3-48d1-b813-5d0a1efd767d"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var driverTokens = JSON.parse(pm.environment.get(\"driver_tokens\"));",
                  "let initial_count = parseInt(pm.collectionVariables.get(\"initial_count\"))",
                  "pm.variables.set(\"driverToken\", driverTokens[initial_count-1])",
                  "",
                  "if(initial_count==1)",
                  "{   ",
                  "    pm.environment.set(\"driverSideOnRideIds\",JSON.stringify([]));",
                  "    pm.environment.set(\"driverSideRideStatus\",JSON.stringify([]));",
                  "}",
                  "",
                  "setTimeout(function(){},1000)",
                  ""
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "00a3dea8-cbc8-4c59-8bd5-a682da198d87"
              }
            }
          ],
          "id": "ac5d2f55-e1d3-4abe-b9b1-5f22051a0f78",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "value",
                  "value": "{{driver_Token}}",
                  "type": "string"
                },
                {
                  "key": "key",
                  "value": "token",
                  "type": "string"
                },
                {
                  "key": "in",
                  "value": "header",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "token",
                "value": "{{app-reg-token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseURL_namma_P}}/driver/ride/list?limit=10",
              "host": [
                "{{baseURL_namma_P}}"
              ],
              "path": [
                "driver",
                "ride",
                "list"
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "onlyActive",
                  "value": "true",
                  "disabled": true
                }
              ]
            }
          },
          "response": [],
          "uid": "38579165-ac5d2f55-e1d3-4abe-b9b1-5f22051a0f78"
        },
        {
          "name": "driver/ride/rideId/start",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "",
                  "pm.test(\"Verify whether Status code is 200\", function () {",
                  "    console.log(\"Request:\", pm.request);",
                  "    console.log(\"Response Body:\", pm.response.text());",
                  "",
                  "    try {",
                  "        pm.response.to.have.status(200);",
                  "        } ",
                  "    catch (error) {",
                  "        console.log(\"Status Code is not 200: It is \", pm.response.code);",
                  "        pm.collectionVariables.set(\"initial_count\", 1);",
                  "        throw new Error(\"Status Code is not 200\");",
                  "    }",
                  "});",
                  "",
                  "if (responseCode.code !== 200) ",
                  "{",
                  "    postman.setNextRequest(null);",
                  "}",
                  "",
                  "let initial_count = pm.collectionVariables.get(\"initial_count\")",
                  "let totalCustomerNumbers = pm.collectionVariables.get(\"totalCustomerNumbers\")",
                  "",
                  "if (initial_count < totalCustomerNumbers) ",
                  "{",
                  "    postman.setNextRequest(\"/auth current Ride\");",
                  "    pm.collectionVariables.set(\"initial_count\", ++initial_count);",
                  "} ",
                  "else ",
                  "{",
                  "    pm.collectionVariables.set(\"initial_count\", 1);",
                  "}"
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "a7754ca6-53ab-478e-bc03-450fa39ed452"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var driverTokens = JSON.parse(pm.environment.get(\"driver_tokens\"));",
                  "let initial_count = parseInt(pm.collectionVariables.get(\"initial_count\"))",
                  "pm.variables.set(\"driver_Token\", driverTokens[initial_count-1])",
                  "",
                  "let initialRideSourceLocations = JSON.parse(pm.collectionVariables.get(\"initialRideSourceLocations\"));",
                  "",
                  "",
                  "let customerTokens = JSON.parse(pm.collectionVariables.get(\"customerTokens\"))",
                  "pm.variables.set(\"customer_Token\", customerTokens[initial_count-1])",
                  "",
                  "",
                  "pm.variables.set(\"user_Lat\", initialRideSourceLocations[initial_count - 1][0])",
                  "pm.variables.set(\"user_Lon\", initialRideSourceLocations[initial_count - 1][1])",
                  "",
                  "",
                  "setTimeout(function(){},1000)",
                  ""
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "711d4676-8254-4e81-83f4-7694126fae77"
              }
            }
          ],
          "id": "048bcb3b-00f7-43f1-89ef-0c8b4c54d8e4",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "value",
                  "value": "{{driver_Token}}",
                  "type": "string"
                },
                {
                  "key": "key",
                  "value": "token",
                  "type": "string"
                },
                {
                  "key": "in",
                  "value": "header",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "token",
                "value": "{{app-reg-token}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"rideOtp\": \"{{userOtp}}\",\n    \"point\": {\n        \"lat\": {{user_Lat}} ,\n        \"lon\": {{user_Lon}}\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseURL_namma_P}}/driver/ride/:rideId/start",
              "host": [
                "{{baseURL_namma_P}}"
              ],
              "path": [
                "driver",
                "ride",
                ":rideId",
                "start"
              ],
              "variable": [
                {
                  "id": "eb528e79-78db-4280-8737-ed578c701fa0",
                  "key": "rideId",
                  "value": "{{driverRideId}}"
                }
              ]
            }
          },
          "response": [],
          "uid": "38579165-048bcb3b-00f7-43f1-89ef-0c8b4c54d8e4"
        }
      ],
      "id": "6eb520b2-011c-4ed7-abdb-450145591499",
      "uid": "38579165-6eb520b2-011c-4ed7-abdb-450145591499"
    },
    {
      "name": "Validating the batching",
      "item": [
        {
          "name": "/auth",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Verify whether Status code is 200\", function () {",
                  "    console.log(\"Request:\", pm.request);",
                  "    console.log(\"Response Body:\", pm.response.text());",
                  "",
                  "    try {",
                  "        pm.response.to.have.status(200);",
                  "        } ",
                  "    catch (error) {",
                  "        console.log(\"Status Code is not 200: It is \", pm.response.code);",
                  "        pm.collectionVariables.set(\"initial_count\", 1);",
                  "        throw new Error(\"Status Code is not 200\");",
                  "    }",
                  "});",
                  "var jsonData = JSON.parse(responseBody);",
                  "var totalDriverNumbers = pm.collectionVariables.get(\"totalDriverNumbers\");",
                  "let initial_count = pm.collectionVariables.get(\"initial_count\")",
                  "let driver_authIds = pm.collectionVariables.get('driver_authIds');",
                  "",
                  "// Retrieve the array from collection variables and parse it",
                  "",
                  "if(initial_count==1) ",
                  "{",
                  "    driver_authIds = [];",
                  "}",
                  "else",
                  "{",
                  "     driver_authIds = JSON.parse(driver_authIds);",
                  "}",
                  "",
                  "driver_authIds.push(jsonData.authId);",
                  "",
                  "// Convert the updated array back to a JSON string",
                  "pm.collectionVariables.set(\"driver_authIds\", JSON.stringify(driver_authIds));",
                  "",
                  "// Increment initial_count",
                  "pm.collectionVariables.set(\"initial_count\", ++initial_count);",
                  "",
                  "",
                  "if (initial_count <= totalDriverNumbers) {",
                  "    postman.setNextRequest(\"/auth\");",
                  "} ",
                  "else ",
                  "{",
                  "    pm.collectionVariables.set(\"initial_count\", 1);",
                  "}",
                  ""
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "6d43f0db-f9b1-494b-91eb-a7da83cb9d1b"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var initial_count = parseInt(pm.collectionVariables.get(\"initial_count\"));",
                  "pm.collectionVariables.set(\"rseq_count\",0)",
                  "pm.collectionVariables.set(\"ncrr_count\",0)",
                  "",
                  "function driverNumbersplit() {",
                  "    var driverNumbers = data[\"notOnRideDriverNumbers\"]; ",
                  "    console.log(driverNumbers);",
                  "    var commaSeperation = driverNumbers.split(\",\");",
                  "    var trimmedDriverNumbers = commaSeperation.map(function(number) {",
                  "        return number.trim();",
                  "    });",
                  "    pm.collectionVariables.set(\"driverNumbers\", JSON.stringify(trimmedDriverNumbers));",
                  "    ",
                  "}",
                  "",
                  "if(initial_count==1)",
                  "{",
                  "    driverNumbersplit();",
                  "     pm.collectionVariables.set(\"driverAuthIds\", JSON.stringify([]));",
                  "}",
                  "// Parse the JSON string back into an array",
                  "let driverNumbers = JSON.parse(pm.collectionVariables.get(\"driverNumbers\"));",
                  "",
                  "let notOnRideDriversCount =  driverNumbers.length;",
                  "var totalDriverNumbersCount = parseInt(pm.collectionVariables.get(\"onRideDriversCount\"))+notOnRideDriversCount;",
                  "var onRideDriversCount = pm.collectionVariables.get(\"onRideDriversCount\");",
                  "",
                  "console.log(\"onRideDriversCount \"+onRideDriversCount)",
                  "console.log(\"notOnRideDriversCount \"+notOnRideDriversCount)",
                  "console.log(\"TotalDriverNumbersCount \"+totalDriverNumbersCount)",
                  "",
                  "",
                  "",
                  "pm.collectionVariables.set(\"totalDriverNumbers\",notOnRideDriversCount)",
                  "pm.collectionVariables.set(\"totalDriverNumbersCount\",totalDriverNumbersCount)",
                  "console.log(totalDriverNumbersCount)",
                  "",
                  "",
                  "// Set the current driver number based on initial_count",
                  "pm.variables.set(\"currentDriverNumber\", driverNumbers[initial_count - 1]);",
                  "",
                  "// Simulate a delay",
                  "setTimeout(function(){}, 500);",
                  ""
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "8b738d5d-0363-4a52-93f5-438e86c6f917"
              }
            }
          ],
          "id": "fad45ed5-ac03-4b18-9819-7e886032187b",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json;charset=utf-8"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"mobileNumber\": \"{{currentDriverNumber}}\",\n    \"mobileCountryCode\": \"+91\",\n    \"merchantId\": \"7f7896dd-787e-4a0b-8675-e9e6fe93bb8f\",\n     \"merchantOperatingCity\": \"Bangalore\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseURL_namma_P}}/auth",
              "host": [
                "{{baseURL_namma_P}}"
              ],
              "path": [
                "auth"
              ]
            }
          },
          "response": [],
          "uid": "38579165-fad45ed5-ac03-4b18-9819-7e886032187b"
        },
        {
          "name": "/auth/:authId/verify driver",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Verify whether Status code is 200\", function () {",
                  "    console.log(\"Request:\", pm.request);",
                  "    console.log(\"Response Body:\", pm.response.text());",
                  "",
                  "    try {",
                  "        pm.response.to.have.status(200);",
                  "        } ",
                  "    catch (error) {",
                  "        console.log(\"Status Code is not 200: It is \", pm.response.code);",
                  "        pm.collectionVariables.set(\"initial_count\", 1);",
                  "        throw new Error(\"Status Code is not 200\");",
                  "    }",
                  "});",
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "var initial_count = pm.collectionVariables.get(\"initial_count\");",
                  "var totalDriverNumbers = pm.collectionVariables.get(\"totalDriverNumbers\");",
                  "let driver_tokens = pm.environment.get('driver_tokens');",
                  "let driver_ids = pm.collectionVariables.get(\"driver_ids\")",
                  "",
                  "// Retrieve the array from collection variables and parse it",
                  "",
                  "",
                  "",
                  "if (driver_tokens) ",
                  "{",
                  "    driver_tokens = JSON.parse(driver_tokens);",
                  "} ",
                  "else ",
                  "{",
                  "    driver_tokens = [];",
                  "}",
                  "",
                  "if(driver_ids)",
                  "{",
                  "    driver_ids = JSON.parse(driver_ids);",
                  "}",
                  "else",
                  "{",
                  "    driver_ids = [];",
                  "}",
                  "",
                  "driver_tokens.push(jsonData.token);",
                  "driver_ids.push(jsonData.person.id)",
                  "//Printing DriverIds",
                  "console.log(\"Driver \"+initial_count+\" id \"+jsonData.person.id)",
                  "",
                  "",
                  "// Convert the updated array back to a JSON string",
                  "pm.environment.set(\"driver_tokens\", JSON.stringify(driver_tokens));",
                  "pm.collectionVariables.set(\"driver_ids\",JSON.stringify(driver_ids));",
                  "",
                  "",
                  "// Increment initial_count",
                  "pm.collectionVariables.set(\"initial_count\", ++initial_count);",
                  "",
                  "if (initial_count <= totalDriverNumbers) {",
                  "    postman.setNextRequest(\"/auth/:authId/verify driver\");",
                  "} ",
                  "else ",
                  "{",
                  "    pm.collectionVariables.set(\"initial_count\", 1);",
                  "    console.log(driver_tokens);",
                  "}",
                  ""
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "c16dd303-0757-435a-b3a1-372c29f831ee"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var initial_count = pm.collectionVariables.get(\"initial_count\")",
                  "let driver_authIds = JSON.parse(pm.collectionVariables.get(\"driver_authIds\"))",
                  "",
                  "pm.variables.set(\"driverAuthId\",driver_authIds[initial_count-1])",
                  "setTimeout(function(){},500)"
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "66e7376d-ba0e-4769-9023-63e4a972c7e2"
              }
            }
          ],
          "id": "090a4834-6266-4cdc-bf18-86b792252162",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json;charset=utf-8"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"otp\": \"7891\",\n    \"deviceToken\": \"5497873d-10ca-42f3-8a32-22de4c916026\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseURL_namma_P}}/auth/:authId/verify",
              "host": [
                "{{baseURL_namma_P}}"
              ],
              "path": [
                "auth",
                ":authId",
                "verify"
              ],
              "variable": [
                {
                  "id": "eff6de48-7ad3-45ee-b0f2-5854d4b5274f",
                  "key": "authId",
                  "value": "{{driverAuthId}}",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": [],
          "uid": "38579165-090a4834-6266-4cdc-bf18-86b792252162"
        },
        {
          "name": "/driver/setActivity",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "var initialValue = pm.collectionVariables.get(\"initialValue\")",
                  "var initial_count = pm.collectionVariables.get(\"initial_count\")",
                  "var totalDriverNumbersCount = pm.collectionVariables.get(\"totalDriverNumbersCount\");",
                  "",
                  "pm.test(\"Verify whether Status code is 200\", function () {",
                  "    console.log(\"Request:\", pm.request);",
                  "    console.log(\"Response Body:\", pm.response.text());",
                  "",
                  "    try {",
                  "        pm.response.to.have.status(200);",
                  "        } ",
                  "    catch (error) {",
                  "        console.log(\"Status Code is not 200: It is \", pm.response.code);",
                  "        pm.collectionVariables.set(\"initial_count\", 1);",
                  "        throw new Error(\"Status Code is not 200\");",
                  "    }",
                  "});",
                  "",
                  "pm.collectionVariables.set(\"initialValue\",++initialValue)",
                  "pm.collectionVariables.set(\"initial_count\",++initial_count)",
                  "",
                  "console.log(initialValue)",
                  "console.log(totalDriverNumbersCount)",
                  "",
                  "if(initialValue<totalDriverNumbersCount)",
                  "{",
                  " console.log(\"Coming into the loop\")",
                  " console.log(initialValue)",
                  " console.log(totalDriverNumbersCount)",
                  " postman.setNextRequest(\"/driver/setActivity\")",
                  "",
                  "}",
                  "else",
                  "{",
                  "    pm.collectionVariables.set(\"initial_count\",1)",
                  "}"
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "742f5956-4ea2-4903-8a7e-e4adf4fd837f"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var initial_count = parseInt(pm.collectionVariables.get(\"initial_count\"));",
                  "",
                  "function driverModessplit() {",
                  "    var driverModes = data[\"notOnRideDriversMode\"];",
                  "    var commaSeparation = driverModes.split(\",\");",
                  "    var modes = commaSeparation.map(function(number){",
                  "        return number.trim();",
                  "    });",
                  "    pm.collectionVariables.set(\"driverModes\", JSON.stringify(modes));",
                  "}",
                  "if(initial_count==1)",
                  "{   ",
                  "    pm.collectionVariables.set(\"initialValue\", pm.collectionVariables.get(\"onRideDriversCount\"))",
                  "    console.log(pm.collectionVariables.get(\"onRideDriversCount\"))",
                  "    driverModessplit();",
                  "}",
                  "// Parse the JSON string back into an array",
                  "let driverModes = JSON.parse(pm.collectionVariables.get(\"driverModes\"));",
                  "let driver_tokens = JSON.parse(pm.environment.get(\"driver_tokens\"))",
                  "console.log(pm.environment.get(\"driver_tokens\"))",
                  "let initialValue = pm.collectionVariables.get(\"initialValue\")",
                  "pm.variables.set(\"driver_Token\", driver_tokens[initialValue])",
                  "",
                  "// Set the current driver number based on initial_count",
                  "pm.variables.set(\"driverMode\", driverModes[initial_count - 1].toUpperCase())",
                  "",
                  "// Simulate a delay",
                  "setTimeout(function(){}, 500);",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "f7b1422b-7d53-4b9c-9666-458c54c464aa"
              }
            }
          ],
          "id": "57f6dc75-e0b3-4910-9b0f-1e3c14091639",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "value",
                  "value": "{{driver_Token}}",
                  "type": "string"
                },
                {
                  "key": "key",
                  "value": "token",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json;charset=utf-8"
              }
            ],
            "url": {
              "raw": "{{baseURL_namma_P}}/driver/setActivity?active=true&mode=\"ONLINE\"",
              "host": [
                "{{baseURL_namma_P}}"
              ],
              "path": [
                "driver",
                "setActivity"
              ],
              "query": [
                {
                  "key": "active",
                  "value": "true"
                },
                {
                  "key": "mode",
                  "value": "\"ONLINE\""
                }
              ]
            }
          },
          "response": [],
          "uid": "38579165-57f6dc75-e0b3-4910-9b0f-1e3c14091639"
        },
        {
          "name": "/driver/profile",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var initial_count = parseInt(pm.collectionVariables.get(\"initial_count\"));",
                  "let driver_tokens = JSON.parse(pm.environment.get(\"driver_tokens\"))",
                  "pm.variables.set(\"driver_Token\", driver_tokens[initial_count-1])"
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "9ba7af52-2619-443c-8898-8fd266dd316d"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "var initial_count = pm.collectionVariables.get(\"initial_count\")",
                  "var onRideDriversCount = pm.collectionVariables.get(\"onRideDriversCount\")",
                  "var totalDriverNumbersCount = pm.collectionVariables.get(\"totalDriverNumbersCount\");",
                  "",
                  "pm.test(\"Verify whether Status code is 200\", function () {",
                  "    console.log(\"Request:\", pm.request);",
                  "    console.log(\"Response Body:\", pm.response.text());",
                  "",
                  "    try {",
                  "        pm.response.to.have.status(200);",
                  "        } ",
                  "    catch (error) {",
                  "        console.log(\"Status Code is not 200: It is \", pm.response.code);",
                  "        pm.collectionVariables.set(\"initial_count\", 1);",
                  "        throw new Error(\"Status Code is not 200\");",
                  "    }",
                  "});",
                  "",
                  "",
                  "if(initial_count<=onRideDriversCount)",
                  "{",
                  "    pm.test(\"Validating whether the driver is still OnRide\",function(){",
                  "        try {",
                  "        pm.expect(jsonData.onRide).to.be.true;",
                  "        } ",
                  "    catch (error) {",
                  "        pm.collectionVariables.set(\"initial_count\", 1);",
                  "        throw new Error(\"Expected: Driver to be onRide; Actual: Driver is not OnRide\");",
                  "    }",
                  "    })",
                  "}",
                  "else",
                  "{",
                  "    pm.test(\"Validating whether the driver is not OnRide\",function(){",
                  "    try {",
                  "        pm.expect(jsonData.onRide).to.be.false;",
                  "        } ",
                  "    catch (error) {",
                  "        pm.collectionVariables.set(\"initial_count\", 1);",
                  "        throw new Error(\"Expected: Driver not to be onRide; Actual: Driver is  OnRide\");",
                  "    }",
                  "    })",
                  "}",
                  "",
                  "pm.collectionVariables.set(\"initial_count\",++initial_count)",
                  "if(initial_count<=totalDriverNumbersCount)",
                  "{",
                  "postman.setNextRequest(\"/driver/profile\")",
                  "}",
                  "else",
                  "{   ",
                  "    //postman.setNextRequest(null)",
                  "    pm.collectionVariables.set(\"initial_count\",1)",
                  "}"
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "1c43a5aa-96ba-4f7f-9ff8-91f564519ac4"
              }
            }
          ],
          "id": "20d00923-602d-4301-99bc-1dace018f13c",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "value",
                  "value": "{{driver_Token}}",
                  "type": "string"
                },
                {
                  "key": "key",
                  "value": "token",
                  "type": "string"
                },
                {
                  "key": "in",
                  "value": "header",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "token",
                "value": "60819053-f00e-4993-bbde-df2669b3c0db"
              }
            ],
            "url": {
              "raw": "{{baseURL_namma_P}}/driver/profile",
              "host": [
                "{{baseURL_namma_P}}"
              ],
              "path": [
                "driver",
                "profile"
              ]
            }
          },
          "response": [],
          "uid": "38579165-20d00923-602d-4301-99bc-1dace018f13c"
        },
        {
          "name": "/driver/location",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var initial_count = pm.collectionVariables.get(\"initial_count\")",
                  "var totalDriverNumbersCount = pm.collectionVariables.get(\"totalDriverNumbersCount\");",
                  "",
                  "pm.test(\"Verify whether Status code is 200\", function () {",
                  "    console.log(\"Request:\", pm.request);",
                  "",
                  "    try {",
                  "        pm.response.to.have.status(200);",
                  "        } ",
                  "    catch (error) {",
                  "        console.log(\"Status Code is not 200: It is \", pm.response.code);",
                  "        pm.collectionVariables.set(\"initial_count\", 1);",
                  "        throw new Error(\"Status Code is not 200\");",
                  "    }",
                  "});",
                  "",
                  "pm.collectionVariables.set(\"initial_count\",++initial_count)",
                  "",
                  "if(initial_count<=totalDriverNumbersCount)",
                  "{",
                  "postman.setNextRequest(\"/driver/location\")",
                  "}",
                  "else",
                  "{   ",
                  "    pm.collectionVariables.set(\"initial_count\",1)",
                  "}"
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "41d21dee-2fa9-42ab-bd47-2621ed0ab358"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var moment = require('moment');",
                  "pm.collectionVariables.set(\"current_time\", moment.utc().format(\"YYYY-MM-DDTHH:mm:ssZ\"));",
                  "function driverLocationsplit() {",
                  "    var driverLocations = data[\"driversForwardBatchCheckLocations\"]; ",
                  "    console.log(driverLocations);",
                  "    var commaSeparation = driverLocations.split(\",\");",
                  "    var segregatedLocations = [];",
                  "    ",
                  "    // Loop through each comma-separated location",
                  "    for (var i = 0; i < commaSeparation.length; i++) {",
                  "    // Split each location by spaces and remove extra whitespace",
                  "    var latLon = commaSeparation[i].trim().split(/\\s+/);",
                  "    segregatedLocations.push(latLon);",
                  "    }",
                  "    // segregatedLocations now contains an array of [latitude, longitude] arrays",
                  "    console.log(segregatedLocations);",
                  "    pm.collectionVariables.set(\"driverLocations\", JSON.stringify(segregatedLocations));",
                  "}",
                  "driverLocationsplit();",
                  "// Parse the JSON string back into an array",
                  "let driverLocations = JSON.parse(pm.collectionVariables.get(\"driverLocations\"));",
                  "var initial_count = parseInt(pm.collectionVariables.get(\"initial_count\"));",
                  "let driver_tokens = JSON.parse(pm.environment.get(\"driver_tokens\"))",
                  "pm.variables.set(\"driver_Token\", driver_tokens[initial_count-1])",
                  "// Set the current driver number based on initial_count",
                  "pm.variables.set(\"driver_lat\", driverLocations[initial_count - 1][0])",
                  "pm.variables.set(\"driver_lon\", driverLocations[initial_count - 1][1])",
                  "// Simulate a delay",
                  "setTimeout(function(){}, 500);"
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "77567769-d4bf-4b4e-80af-c6a903c7331c"
              }
            }
          ],
          "id": "b16b4e11-203a-47b7-ad16-72354201da7b",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "value",
                  "value": "{{driver_Token}}",
                  "type": "string"
                },
                {
                  "key": "key",
                  "value": "token",
                  "type": "string"
                },
                {
                  "key": "in",
                  "value": "header",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json;charset=utf-8"
              },
              {
                "key": "vt",
                "value": "AUTO_RICKSHAW",
                "type": "text"
              },
              {
                "key": "mId",
                "value": "7f7896dd-787e-4a0b-8675-e9e6fe93bb8f",
                "type": "text"
              },
              {
                "key": "dm",
                "value": "ONLINE",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\n    {\n        \"pt\": {\n            \"lat\": {{driver_lat}},\n            \"lon\": {{driver_lon}}\n        },\n        \"ts\": \"{{current_time}}\"\n    },\n    {\n        \"pt\": {\n            \"lat\": {{driver_lat}},\n            \"lon\": {{driver_lon}}\n        },\n        \"ts\": \"{{current_time}}\"\n    },\n    {\n        \"pt\": {\n            \"lat\": {{driver_lat}},\n            \"lon\": {{driver_lon}}\n        },\n        \"ts\": \"{{current_time}}\"\n    },\n    {\n        \"pt\": {\n            \"lat\": {{driver_lat}},\n            \"lon\": {{driver_lon}}\n        },\n        \"ts\": \"{{current_time}}\"\n    },\n    {\n        \"pt\": {\n            \"lat\": {{driver_lat}},\n            \"lon\": {{driver_lon}}\n        },\n        \"ts\": \"{{current_time}}\"\n    }\n]",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseURL_namma_P}}/driver/location",
              "host": [
                "{{baseURL_namma_P}}"
              ],
              "path": [
                "driver",
                "location"
              ]
            }
          },
          "response": [],
          "uid": "38579165-b16b4e11-203a-47b7-ad16-72354201da7b"
        },
        {
          "name": "/customerauth.",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "pm.test(\"Verified whether Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.collectionVariables.set(\"customerauthId\", jsonData.authId);",
                  ""
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "f5226bf9-f9bf-42a7-99b3-1c74f69557e1"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "setTimeout(function(){},2000)",
                  "let customerNumber = data[\"secondRideUserNumber\"]",
                  "pm.variables.set(\"user_mob_number\",customerNumber)",
                  "pm.variables.set(\"merchantId\",\"NAMMA_YATRI\")",
                  ""
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "93b3ba06-1741-49e4-95af-986647c0434f"
              }
            }
          ],
          "id": "d1c0c96f-c0e1-4704-8288-f1952328bc32",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json;charset=utf-8"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"mobileNumber\": \"{{user_mob_number}}\",\n    \"mobileCountryCode\": \"+91\",\n    \"merchantId\" : \"{{merchantId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl_app}}/auth",
              "host": [
                "{{baseUrl_app}}"
              ],
              "path": [
                "auth"
              ]
            }
          },
          "response": [],
          "uid": "38579165-d1c0c96f-c0e1-4704-8288-f1952328bc32"
        },
        {
          "name": "/auth/:authId/verify.",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "pm.test(\"Verified whether Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.collectionVariables.set(\"customerToken\", jsonData.token);"
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "f93e99f6-433a-4bc7-aba6-b7489b319195"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "setTimeout(function(){},500)"
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "6b96f383-3682-4683-8893-48cafc010140"
              }
            }
          ],
          "id": "1ed079e9-2ec8-4bd5-9620-3bb0528bf6af",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json;charset=utf-8"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"otp\": \"7891\",\n    \"deviceToken\": \"9abhi84uc-00a1-9306-000d-2345f3050072\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl_app}}/auth/:authId/verify",
              "host": [
                "{{baseUrl_app}}"
              ],
              "path": [
                "auth",
                ":authId",
                "verify"
              ],
              "variable": [
                {
                  "id": "bbdd634f-ee87-45f5-b444-b813ce468211",
                  "key": "authId",
                  "value": "{{customerauthId}}",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": [],
          "uid": "38579165-1ed079e9-2ec8-4bd5-9620-3bb0528bf6af"
        },
        {
          "name": "/driver/locationUpdate",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var initial_count = pm.collectionVariables.get(\"initial_count\")",
                  "var totalDriverNumbersCount = pm.collectionVariables.get(\"totalDriverNumbersCount\");",
                  "",
                  "pm.test(\"Verify whether Status code is 200\", function () {",
                  "    console.log(\"Request:\", pm.request);",
                  "",
                  "    try {",
                  "        pm.response.to.have.status(200);",
                  "        } ",
                  "    catch (error) {",
                  "        console.log(\"Status Code is not 200: It is \", pm.response.code);",
                  "        pm.collectionVariables.set(\"initial_count\", 1);",
                  "        throw new Error(\"Status Code is not 200\");",
                  "    }",
                  "});",
                  "",
                  "pm.collectionVariables.set(\"initial_count\",++initial_count)",
                  "",
                  "if(initial_count<=totalDriverNumbersCount)",
                  "{",
                  "postman.setNextRequest(\"/driver/locationUpdate\")",
                  "}",
                  "else",
                  "{   ",
                  "    pm.collectionVariables.set(\"initial_count\",1)",
                  "}"
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "de0033af-866c-4acf-8983-0bebb10d8981"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var moment = require('moment');",
                  "pm.collectionVariables.set(\"current_time\", moment.utc().format(\"YYYY-MM-DDTHH:mm:ssZ\"));",
                  "function driverLocationsplit() {",
                  "    var driverLocations = data[\"driversForwardBatchCheckLocations\"]",
                  "    var commaSeparation = driverLocations.split(\",\");",
                  "    var segregatedLocations = [];",
                  "    ",
                  "    // Loop through each comma-separated location",
                  "    for (var i = 0; i < commaSeparation.length; i++) {",
                  "    // Split each location by spaces and remove extra whitespace",
                  "    var latLon = commaSeparation[i].trim().split(/\\s+/);",
                  "    segregatedLocations.push(latLon);",
                  "    }",
                  "    pm.collectionVariables.set(\"driverLocations\", JSON.stringify(segregatedLocations));",
                  "}",
                  "driverLocationsplit();",
                  "// Parse the JSON string back into an array",
                  "let driverLocations = JSON.parse(pm.collectionVariables.get(\"driverLocations\"));",
                  "var initial_count = parseInt(pm.collectionVariables.get(\"initial_count\"));",
                  "let driver_tokens = JSON.parse(pm.environment.get(\"driver_tokens\"))",
                  "pm.variables.set(\"driver_Token\", driver_tokens[initial_count-1])",
                  "",
                  "// Set the current driver number based on initial_count",
                  "pm.variables.set(\"driver_lat\", driverLocations[initial_count - 1][0])",
                  "pm.variables.set(\"driver_lon\", driverLocations[initial_count - 1][1])",
                  "// Simulate a delay",
                  "setTimeout(function(){}, 500);"
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "bd9dae18-13be-405f-bdb7-168371f805e8"
              }
            }
          ],
          "id": "de6457a5-76ea-4dc9-8bae-3347e692a67a",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "value",
                  "value": "{{driver_Token}}",
                  "type": "string"
                },
                {
                  "key": "key",
                  "value": "token",
                  "type": "string"
                },
                {
                  "key": "in",
                  "value": "header",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json;charset=utf-8"
              },
              {
                "key": "vt",
                "value": "AUTO_RICKSHAW",
                "type": "text"
              },
              {
                "key": "mId",
                "value": "7f7896dd-787e-4a0b-8675-e9e6fe93bb8f",
                "type": "text"
              },
              {
                "key": "dm",
                "value": "ONLINE",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\n    {\n        \"pt\": {\n            \"lat\": {{driver_lat}},\n            \"lon\": {{driver_lon}}\n        },\n        \"ts\": \"{{current_time}}\"\n    },\n    {\n        \"pt\": {\n            \"lat\": {{driver_lat}},\n            \"lon\": {{driver_lon}}\n        },\n        \"ts\": \"{{current_time}}\"\n    },\n    {\n        \"pt\": {\n            \"lat\": {{driver_lat}},\n            \"lon\": {{driver_lon}}\n        },\n        \"ts\": \"{{current_time}}\"\n    },\n    {\n        \"pt\": {\n            \"lat\": {{driver_lat}},\n            \"lon\": {{driver_lon}}\n        },\n        \"ts\": \"{{current_time}}\"\n    },\n    {\n        \"pt\": {\n            \"lat\": {{driver_lat}},\n            \"lon\": {{driver_lon}}\n        },\n        \"ts\": \"{{current_time}}\"\n    }\n]",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseURL_namma_P}}/driver/location",
              "host": [
                "{{baseURL_namma_P}}"
              ],
              "path": [
                "driver",
                "location"
              ]
            }
          },
          "response": [],
          "uid": "38579165-de6457a5-76ea-4dc9-8bae-3347e692a67a"
        },
        {
          "name": "/rideSearch",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const body = JSON.parse(responseBody);",
                  "pm.test(\"Verified whether Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "",
                  "pm.collectionVariables.set(\"ride_searchId\", body.searchId);",
                  "",
                  "",
                  " "
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "c030dca5-e14a-42f3-9fac-70f6eb38fa0e"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "setTimeout(function() {}, 2000);",
                  "",
                  "let advancedRideSourceLocation = data[\"advancedRideSourceLocation\"];",
                  "let advancedRideDestinationLocation = data[\"advancedRideDestinationLocation\"];",
                  "",
                  "// Split the source location into latitude and longitude",
                  "var slatlon = advancedRideSourceLocation.trim().split(/\\s+/);",
                  "let sourceLat = slatlon[0];",
                  "let sourceLon = slatlon[1];",
                  "",
                  "// Split the destination location into latitude and longitude",
                  "var dlatlon = advancedRideDestinationLocation.trim().split(/\\s+/);",
                  "let destLat = dlatlon[0];",
                  "let destLon = dlatlon[1];",
                  "",
                  "// Set the variables in Postman",
                  "pm.variables.set(\"user_lat\", sourceLat);",
                  "pm.variables.set(\"user_lon\", sourceLon);",
                  "pm.variables.set(\"destination_lat\", destLat);",
                  "pm.variables.set(\"destination_lon\", destLon);",
                  "",
                  "console.log(\"Source Location:\", sourceLat, sourceLon);",
                  "console.log(\"Destination Location:\", destLat, destLon);",
                  ""
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "079312cd-3c9d-412d-8d15-f8e1665506a0"
              }
            }
          ],
          "id": "682595e7-ce9c-441d-a843-eb3cc26f87ba",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "value",
                  "value": "{{customerToken}}",
                  "type": "string"
                },
                {
                  "key": "key",
                  "value": "token",
                  "type": "string"
                },
                {
                  "key": "in",
                  "value": "header",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json;charset=utf-8"
              },
              {
                "key": "token",
                "value": "{{app-reg-token}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"fareProductType\": \"ONE_WAY\",\n    \"contents\": {\n        \"origin\": {\n            \"address\": {\n                \"area\": \"8th Block Koramangala\",\n                \"areaCode\": \"560047\",\n                \"building\": \"Juspay Buildings\",\n                \"city\": \"Bangalore\",\n                \"country\": \"India\",\n                \"door\": \"#444\",\n                \"street\": \"18th Main\",\n                \"state\": \"Karnataka\"\n            },\n            \"gps\": {\n                \"lat\": {{user_Lat}},\n                \"lon\": {{user_Lon}}\n            }\n        },\n        \"destination\": {\n            \"address\": {\n                \"area\": \"6th Block Koramangala\",\n                \"areaCode\": \"560047\",\n                \"building\": \"Juspay Apartments\",\n                \"city\": \"Bangalore\",\n                \"country\": \"India\",\n                \"door\": \"#444\",\n                \"street\": \"18th Main\",\n                \"state\": \"Karnataka\"\n            },\n            \"gps\": {\n                \"lat\": {{destination_Lat}},\n                \"lon\": {{destination_Lon}}\n            }\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl_app}}/rideSearch",
              "host": [
                "{{baseUrl_app}}"
              ],
              "path": [
                "rideSearch"
              ]
            }
          },
          "response": [],
          "uid": "38579165-682595e7-ce9c-441d-a843-eb3cc26f87ba"
        },
        {
          "name": "/rideSearch/:searchId/results",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const jsonData = JSON.parse(responseBody);",
                  " pm.collectionVariables.set(\"retryFlag\",true)",
                  "  pm.test(\"Verify whether Status code is 200\", function () {",
                  "    console.log(\"Request:\", pm.request);",
                  "    console.log(\"Response Body:\", pm.response.text());",
                  "",
                  "    try {",
                  "        pm.response.to.have.status(200);",
                  "        } ",
                  "    catch (error) {",
                  "        console.log(\"Status Code is not 200: It is \", pm.response.code);",
                  "        pm.collectionVariables.set(\"initial_count\", 1);",
                  "        throw new Error(\"Status Code is not 200\");",
                  "    }",
                  "});",
                  "",
                  "let estimatesRetryCount = pm.collectionVariables.get(\"estimatesRetryCount\");",
                  "let estimateslen = jsonData.estimates.length;",
                  "",
                  "if(estimatesRetryCount == null || estimatesRetryCount == undefined)",
                  "{",
                  "  estimatesRetryCount = 0;",
                  "  pm.collectionVariables.set(\"estimatesRetryCount\",estimatesRetryCount)",
                  "}",
                  "",
                  "if (responseCode.code !== 200  ||  jsonData.estimates.length==0) ",
                  "{  ",
                  "    if(jsonData.estimates.length==0 && estimatesRetryCount < 7)",
                  "    {",
                  "       postman.setNextRequest(\"/rideSearch/:searchId/results currentRide\")",
                  "       pm.collectionVariables.set(\"estimatesRetryCount\",estimatesRetryCount+=1)",
                  "       setTimeout(function(){},3000)",
                  "    }",
                  "    else",
                  "    { ",
                  "      console.error(\"No estimates\")",
                  "      postman.setNextRequest(null);",
                  "      pm.collectionVariables.set(\"estimatesRetryCount\",0)",
                  "    }",
                  "}",
                  "else ",
                  "{",
                  "for (let i = 0; i < estimateslen; i++)",
                  "{    ",
                  " if ( (jsonData.estimates[i].agencyName === \"NAMMA_YATRI\") && (jsonData.estimates[i].vehicleVariant === \"AUTO_RICKSHAW\")) {",
                  "    pm.collectionVariables.set(\"EstiAuto\", jsonData.estimates[i].id);",
                  "    pm.collectionVariables.set(\"retryFlag\",false)",
                  "    console.log(jsonData.estimates[i].id + \" AutoEstimateId\")",
                  " }",
                  " else if ((jsonData.estimates[i].agencyName === \"NAMMA_YATRI\") && (jsonData.estimates[i].vehicleVariant === \"SUV\")) {",
                  "   pm.collectionVariables.set(\"Estisuv\", jsonData.estimates[i].id);",
                  "   console.log(jsonData.estimates[i].id + \"SUVEstimateId\")",
                  "  }",
                  "",
                  " else if ( (jsonData.estimates[i].agencyName === \"NAMMA_YATRI\") && (jsonData.estimates[i].vehicleVariant === \"SEDAN\")) {",
                  "",
                  "    pm.collectionVariables.set(\"EstiSedan\", jsonData.estimates[i].id);",
                  "    console.log(jsonData.estimates[i].id + \"SedanEstimateId\")",
                  "  }",
                  "",
                  " else if ( (jsonData.estimates[i].agencyName === \"NAMMA_YATRI\") && (jsonData.estimates[i].vehicleVariant === \"HATCHBACK\")) {",
                  "    pm.collectionVariables.set(\"EstiHatch\", jsonData.estimates[i].id);",
                  "    console.log(jsonData.estimates[i].id + \"HatchbackEstimateId\")",
                  "  }",
                  "",
                  " else if ( (jsonData.estimates[i].agencyName === \"NAMMA_YATRI\") && (jsonData.estimates[i].vehicleVariant === \"TAXI\")) {",
                  "    pm.collectionVariables.set(\"EstiTaxi\", jsonData.estimates[i].id);",
                  "    console.log(jsonData.estimates[i].id + \"TaxiEstimateId\")",
                  "   }",
                  "}",
                  "}",
                  "",
                  "if(pm.collectionVariables.get(\"retryFlag\")===true && estimatesRetryCount < 8)",
                  "{",
                  "    postman.setNextRequest(\"/rideSearch/:searchId/results\")",
                  "    pm.collectionVariables.set(\"estimatesRetryCount\",estimatesRetryCount+=1)",
                  "    setTimeout(function(){},3000)",
                  "}",
                  "",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "33713e90-0457-4091-a858-87ddc9c01939"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "setTimeout(function(){},2000)"
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "e38ad975-85b9-4dc4-94bd-6f61e7e458c7"
              }
            }
          ],
          "id": "a2891bfe-8632-480d-8451-435568dc986d",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "value",
                  "value": "{{customerToken}}",
                  "type": "string"
                },
                {
                  "key": "key",
                  "value": "token",
                  "type": "string"
                },
                {
                  "key": "in",
                  "value": "header",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "token",
                "value": "{{app-reg-token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl_app}}/rideSearch/:searchId/results",
              "host": [
                "{{baseUrl_app}}"
              ],
              "path": [
                "rideSearch",
                ":searchId",
                "results"
              ],
              "variable": [
                {
                  "id": "d4e95311-6e39-4838-88d8-6cad06729d87",
                  "key": "searchId",
                  "value": "{{ride_searchId}}"
                }
              ]
            }
          },
          "response": [],
          "uid": "38579165-a2891bfe-8632-480d-8451-435568dc986d"
        },
        {
          "name": "/estimate/:estimateId/select2",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Verified whether Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "86c48b49-56d1-49a1-9b3c-e01ea7605095"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "setTimeout(function(){},1000)"
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "79d34d82-0b3e-43d1-8577-5c8abbd60e9b"
              }
            }
          ],
          "id": "17649a51-d396-494a-b9ac-99aa1093d1e1",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "value",
                  "value": "{{customerToken}}",
                  "type": "string"
                },
                {
                  "key": "key",
                  "value": "token",
                  "type": "string"
                },
                {
                  "key": "in",
                  "value": "header",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"customerExtraFee\": null,\n  \"autoAssignEnabledV2\": false,\n  \"autoAssignEnabled\": false,\n  \"isAdvancedBookingEnabled\": true\n}\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl_app}}/estimate/:estimateId/select2",
              "host": [
                "{{baseUrl_app}}"
              ],
              "path": [
                "estimate",
                ":estimateId",
                "select2"
              ],
              "variable": [
                {
                  "id": "88a7656f-2913-4baa-af1b-738f7aede775",
                  "key": "estimateId",
                  "value": "{{EstiAuto}}"
                }
              ]
            }
          },
          "response": [],
          "uid": "38579165-17649a51-d396-494a-b9ac-99aa1093d1e1"
        },
        {
          "name": "/driver/locationUpdate/1",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var initial_count = pm.collectionVariables.get(\"initial_count\")",
                  "var totalDriverNumbersCount = pm.collectionVariables.get(\"totalDriverNumbersCount\");",
                  "",
                  "pm.test(\"Verify whether Status code is 200\", function () {",
                  "    console.log(\"Request:\", pm.request);",
                  "",
                  "    try {",
                  "        pm.response.to.have.status(200);",
                  "        } ",
                  "    catch (error) {",
                  "        console.log(\"Status Code is not 200: It is \", pm.response.code);",
                  "        pm.collectionVariables.set(\"initial_count\", 1);",
                  "        throw new Error(\"Status Code is not 200\");",
                  "    }",
                  "});",
                  "",
                  "pm.collectionVariables.set(\"initial_count\",++initial_count)",
                  "",
                  "if(initial_count<=totalDriverNumbersCount)",
                  "{",
                  "postman.setNextRequest(\"/driver/locationUpdate/1\")",
                  "}",
                  "else",
                  "{   ",
                  "    pm.collectionVariables.set(\"initial_count\",1)",
                  "}"
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "2ad2ae70-bdf2-4c29-8a14-219e22a29a22"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var moment = require('moment');",
                  "pm.collectionVariables.set(\"current_time\", moment.utc().format(\"YYYY-MM-DDTHH:mm:ssZ\"));",
                  "function driverLocationsplit() {",
                  "    var driverLocations = data[\"driversForwardBatchCheckLocations\"]; ",
                  "    var commaSeparation = driverLocations.split(\",\");",
                  "    var segregatedLocations = [];",
                  "    ",
                  "    // Loop through each comma-separated location",
                  "    for (var i = 0; i < commaSeparation.length; i++) {",
                  "    // Split each location by spaces and remove extra whitespace",
                  "    var latLon = commaSeparation[i].trim().split(/\\s+/);",
                  "    segregatedLocations.push(latLon);",
                  "    }",
                  "    pm.collectionVariables.set(\"driverLocations\", JSON.stringify(segregatedLocations));",
                  "}",
                  "driverLocationsplit();",
                  "// Parse the JSON string back into an array",
                  "let driverLocations = JSON.parse(pm.collectionVariables.get(\"driverLocations\"));",
                  "var initial_count = parseInt(pm.collectionVariables.get(\"initial_count\"));",
                  "let driver_tokens = JSON.parse(pm.environment.get(\"driver_tokens\"))",
                  "pm.variables.set(\"driver_Token\", driver_tokens[initial_count-1])",
                  "// Set the current driver number based on initial_count",
                  "pm.variables.set(\"driver_lat\", driverLocations[initial_count - 1][0])",
                  "pm.variables.set(\"driver_lon\", driverLocations[initial_count - 1][1])",
                  ""
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "d49f3c0c-08fb-4c8a-93a9-9dde13cece5e"
              }
            }
          ],
          "id": "4a4a1c9b-05ed-499f-a45b-f60356c98819",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "value",
                  "value": "{{driver_Token}}",
                  "type": "string"
                },
                {
                  "key": "key",
                  "value": "token",
                  "type": "string"
                },
                {
                  "key": "in",
                  "value": "header",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json;charset=utf-8"
              },
              {
                "key": "vt",
                "value": "AUTO_RICKSHAW",
                "type": "text"
              },
              {
                "key": "mId",
                "value": "7f7896dd-787e-4a0b-8675-e9e6fe93bb8f",
                "type": "text"
              },
              {
                "key": "dm",
                "value": "ONLINE",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\n    {\n        \"pt\": {\n            \"lat\": {{driver_lat}},\n            \"lon\": {{driver_lon}}\n        },\n        \"ts\": \"{{current_time}}\"\n    },\n    {\n        \"pt\": {\n            \"lat\": {{driver_lat}},\n            \"lon\": {{driver_lon}}\n        },\n        \"ts\": \"{{current_time}}\"\n    },\n    {\n        \"pt\": {\n            \"lat\": {{driver_lat}},\n            \"lon\": {{driver_lon}}\n        },\n        \"ts\": \"{{current_time}}\"\n    },\n    {\n        \"pt\": {\n            \"lat\": {{driver_lat}},\n            \"lon\": {{driver_lon}}\n        },\n        \"ts\": \"{{current_time}}\"\n    },\n    {\n        \"pt\": {\n            \"lat\": {{driver_lat}},\n            \"lon\": {{driver_lon}}\n        },\n        \"ts\": \"{{current_time}}\"\n    }\n]",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseURL_namma_P}}/driver/location",
              "host": [
                "{{baseURL_namma_P}}"
              ],
              "path": [
                "driver",
                "location"
              ]
            }
          },
          "response": [],
          "uid": "38579165-4a4a1c9b-05ed-499f-a45b-f60356c98819"
        },
        {
          "name": "/driver/nearbyRideRequest [b1]",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "var initial_count = pm.collectionVariables.get(\"initial_count\")",
                  "var TotalDriverNumbers = pm.collectionVariables.get(\"totalDriverNumbersCount\")",
                  "let driver_ids = JSON.parse(pm.collectionVariables.get(\"driver_ids\"))",
                  "",
                  "",
                  "var batch_1 = pm.collectionVariables.get(\"batch_1\")",
                  "",
                  "pm.test(\"Verified whether Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.collectionVariables.set(\"initial_count\",++initial_count)",
                  "",
                  "if(jsonData.searchRequestsForDriver.length > 0)",
                  "{",
                  "    console.log(\"Driver \"+(initial_count-1)+\" received in batch 1\")",
                  "    console.log(\"driverId\",driver_ids[initial_count-2])",
                  "    console.log(\"SearchTryId \"+jsonData.searchRequestsForDriver[0].searchTryId)",
                  "    var result = batch_1.concat(\"1\")",
                  "    pm.collectionVariables.set(\"batch_1\",result)",
                  "}",
                  "else",
                  "{",
                  "    var result = batch_1.concat(\"0\")",
                  "    pm.collectionVariables.set(\"batch_1\",result)",
                  "}",
                  "",
                  "if(initial_count<=TotalDriverNumbers)",
                  "{",
                  "postman.setNextRequest(\"/driver/nearbyRideRequest [b1]\")",
                  "}",
                  "else",
                  "{",
                  "    pm.collectionVariables.set(\"initial_count\",1)",
                  "}",
                  "",
                  ""
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "893fdc15-afe4-4247-960e-953d9a2c2fd1"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var moment = require('moment');",
                  "pm.globals.set(\"current_time\", moment.utc().format(\"YYYY-MM-DDTHH:mm:ssZ\"));",
                  "",
                  "",
                  "var initial_count = pm.collectionVariables.get(\"initial_count\")",
                  "let driver_tokens = JSON.parse(pm.environment.get(\"driver_tokens\"))",
                  "",
                  "",
                  "pm.variables.set(\"driver_Token\",driver_tokens[initial_count-1])",
                  "var wait_duration = Number(pm.collectionVariables.get(\"first_batch_hold_duration\"))",
                  "",
                  "",
                  "if(initial_count==1)",
                  "{",
                  "    setTimeout(function(){},wait_duration)",
                  "    pm.collectionVariables.set(\"batch_1\",[])",
                  "}",
                  ""
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "c562fe68-8fec-4311-8477-79c41e4fabe0"
              }
            }
          ],
          "id": "75c5c638-c55b-4a16-a085-8defbfe32d09",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "value",
                  "value": "{{driver_Token}}",
                  "type": "string"
                },
                {
                  "key": "key",
                  "value": "token",
                  "type": "string"
                },
                {
                  "key": "in",
                  "value": "header",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "token",
                "value": "{{app-reg-token}}",
                "type": "text",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{baseURL_namma_P}}/driver/nearbyRideRequest",
              "host": [
                "{{baseURL_namma_P}}"
              ],
              "path": [
                "driver",
                "nearbyRideRequest"
              ]
            }
          },
          "response": [],
          "uid": "38579165-75c5c638-c55b-4a16-a085-8defbfe32d09"
        },
        {
          "name": "/driver/locationUpdate/2",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var initial_count = pm.collectionVariables.get(\"initial_count\")",
                  "var totalDriverNumbersCount = pm.collectionVariables.get(\"totalDriverNumbersCount\");",
                  "",
                  "pm.test(\"Verify whether Status code is 200\", function () {",
                  "    console.log(\"Request:\", pm.request);",
                  "",
                  "    try {",
                  "        pm.response.to.have.status(200);",
                  "        } ",
                  "    catch (error) {",
                  "        console.log(\"Status Code is not 200: It is \", pm.response.code);",
                  "        pm.collectionVariables.set(\"initial_count\", 1);",
                  "        throw new Error(\"Status Code is not 200\");",
                  "    }",
                  "});",
                  "",
                  "pm.collectionVariables.set(\"initial_count\",++initial_count)",
                  "",
                  "if(initial_count<=totalDriverNumbersCount)",
                  "{",
                  "postman.setNextRequest(\"/driver/locationUpdate/2\")",
                  "}",
                  "else",
                  "{   ",
                  "    pm.collectionVariables.set(\"initial_count\",1)",
                  "}"
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "dbf24891-e941-4b4b-8479-8e486b4a3153"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var moment = require('moment');",
                  "pm.collectionVariables.set(\"current_time\", moment.utc().format(\"YYYY-MM-DDTHH:mm:ssZ\"));",
                  "function driverLocationsplit() {",
                  "    var driverLocations = data[\"driversForwardBatchCheckLocations\"]; ",
                  "    var commaSeparation = driverLocations.split(\",\");",
                  "    var segregatedLocations = [];",
                  "    ",
                  "    // Loop through each comma-separated location",
                  "    for (var i = 0; i < commaSeparation.length; i++) {",
                  "    // Split each location by spaces and remove extra whitespace",
                  "    var latLon = commaSeparation[i].trim().split(/\\s+/);",
                  "    segregatedLocations.push(latLon);",
                  "    }",
                  "    // segregatedLocations now contains an array of [latitude, longitude] arrays",
                  "    pm.collectionVariables.set(\"driverLocations\", JSON.stringify(segregatedLocations));",
                  "}",
                  "driverLocationsplit();",
                  "// Parse the JSON string back into an array",
                  "let driverLocations = JSON.parse(pm.collectionVariables.get(\"driverLocations\"));",
                  "var initial_count = parseInt(pm.collectionVariables.get(\"initial_count\"));",
                  "let driver_tokens = JSON.parse(pm.environment.get(\"driver_tokens\"))",
                  "pm.variables.set(\"driver_Token\", driver_tokens[initial_count-1])",
                  "// Set the current driver number based on initial_count",
                  "pm.variables.set(\"driver_lat\", driverLocations[initial_count - 1][0])",
                  "pm.variables.set(\"driver_lon\", driverLocations[initial_count - 1][1])",
                  ""
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "8ba734c3-4643-4a2a-ac59-be05b03bd2c8"
              }
            }
          ],
          "id": "219f6d3d-45b4-4d31-873b-722ec2ef96ed",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "value",
                  "value": "{{driver_Token}}",
                  "type": "string"
                },
                {
                  "key": "key",
                  "value": "token",
                  "type": "string"
                },
                {
                  "key": "in",
                  "value": "header",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json;charset=utf-8"
              },
              {
                "key": "vt",
                "value": "AUTO_RICKSHAW",
                "type": "text"
              },
              {
                "key": "mId",
                "value": "7f7896dd-787e-4a0b-8675-e9e6fe93bb8f",
                "type": "text"
              },
              {
                "key": "dm",
                "value": "ONLINE",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\n    {\n        \"pt\": {\n            \"lat\": {{driver_lat}},\n            \"lon\": {{driver_lon}}\n        },\n        \"ts\": \"{{current_time}}\"\n    },\n    {\n        \"pt\": {\n            \"lat\": {{driver_lat}},\n            \"lon\": {{driver_lon}}\n        },\n        \"ts\": \"{{current_time}}\"\n    },\n    {\n        \"pt\": {\n            \"lat\": {{driver_lat}},\n            \"lon\": {{driver_lon}}\n        },\n        \"ts\": \"{{current_time}}\"\n    },\n    {\n        \"pt\": {\n            \"lat\": {{driver_lat}},\n            \"lon\": {{driver_lon}}\n        },\n        \"ts\": \"{{current_time}}\"\n    },\n    {\n        \"pt\": {\n            \"lat\": {{driver_lat}},\n            \"lon\": {{driver_lon}}\n        },\n        \"ts\": \"{{current_time}}\"\n    }\n]",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseURL_namma_P}}/driver/location",
              "host": [
                "{{baseURL_namma_P}}"
              ],
              "path": [
                "driver",
                "location"
              ]
            }
          },
          "response": [],
          "uid": "38579165-219f6d3d-45b4-4d31-873b-722ec2ef96ed"
        },
        {
          "name": "/driver/nearbyRideRequest [b2]",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "var initial_count = pm.collectionVariables.get(\"initial_count\")",
                  "var TotalDriverNumbers = pm.collectionVariables.get(\"totalDriverNumbersCount\")",
                  "var batch_2 = pm.collectionVariables.get(\"batch_2\")",
                  "let driver_ids = JSON.parse(pm.collectionVariables.get(\"driver_ids\"))",
                  "",
                  "",
                  "pm.test(\"Verified whether Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.collectionVariables.set(\"initial_count\",++initial_count)",
                  "",
                  "if(jsonData.searchRequestsForDriver.length > 0)",
                  "{",
                  "    console.log(\"Driver \"+(initial_count-1)+\" received in batch 2\")",
                  "    console.log(\"driverId\",driver_ids[initial_count-2])",
                  "    console.log(\"SearchTryId \"+jsonData.searchRequestsForDriver[0].searchTryId)",
                  "    var result = batch_2.concat(\"1\")",
                  "    pm.collectionVariables.set(\"batch_2\",result)",
                  "}",
                  "else",
                  "{",
                  "    var result = batch_2.concat(\"0\")",
                  "    pm.collectionVariables.set(\"batch_2\",result)",
                  "}",
                  "",
                  "if(initial_count<=TotalDriverNumbers)",
                  "{",
                  "postman.setNextRequest(\"/driver/nearbyRideRequest [b2]\")",
                  "}",
                  "else",
                  "{",
                  "    pm.collectionVariables.set(\"initial_count\",1)",
                  "}",
                  "",
                  ""
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "ac9ff2bd-134e-4014-aa1e-02545e5e37a9"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var moment = require('moment');",
                  "pm.globals.set(\"current_time\", moment.utc().format(\"YYYY-MM-DDTHH:mm:ssZ\"));",
                  "",
                  "var initial_count = pm.collectionVariables.get(\"initial_count\")",
                  "let driver_tokens = JSON.parse(pm.environment.get(\"driver_tokens\"))",
                  "",
                  "",
                  "",
                  "pm.variables.set(\"driver_Token\",driver_tokens[initial_count-1])",
                  "var wait_duration = Number(pm.collectionVariables.get(\"delay_between_batches\"))",
                  "",
                  "",
                  "if(initial_count==1)",
                  "{",
                  "    setTimeout(function(){},wait_duration)",
                  "    pm.collectionVariables.set(\"batch_2\",[])",
                  "}",
                  ""
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "dadb9e23-0e34-414a-9318-bdb60ba9f33e"
              }
            }
          ],
          "id": "e9b006f2-a15d-43ef-923c-1e8296606888",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "value",
                  "value": "{{driver_Token}}",
                  "type": "string"
                },
                {
                  "key": "key",
                  "value": "token",
                  "type": "string"
                },
                {
                  "key": "in",
                  "value": "header",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "token",
                "value": "{{app-reg-token}}",
                "type": "text",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{baseURL_namma_P}}/driver/nearbyRideRequest",
              "host": [
                "{{baseURL_namma_P}}"
              ],
              "path": [
                "driver",
                "nearbyRideRequest"
              ]
            }
          },
          "response": [],
          "uid": "38579165-e9b006f2-a15d-43ef-923c-1e8296606888"
        },
        {
          "name": "/driver/locationUpdate/3",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var initial_count = pm.collectionVariables.get(\"initial_count\")",
                  "var totalDriverNumbersCount = pm.collectionVariables.get(\"totalDriverNumbersCount\");",
                  "",
                  "pm.test(\"Verify whether Status code is 200\", function () {",
                  "    console.log(\"Request:\", pm.request);",
                  "",
                  "    try {",
                  "        pm.response.to.have.status(200);",
                  "        } ",
                  "    catch (error) {",
                  "        console.log(\"Status Code is not 200: It is \", pm.response.code);",
                  "        pm.collectionVariables.set(\"initial_count\", 1);",
                  "        throw new Error(\"Status Code is not 200\");",
                  "    }",
                  "});",
                  "",
                  "pm.collectionVariables.set(\"initial_count\",++initial_count)",
                  "",
                  "if(initial_count<=totalDriverNumbersCount)",
                  "{",
                  "postman.setNextRequest(\"/driver/locationUpdate/3\")",
                  "}",
                  "else",
                  "{   ",
                  "    pm.collectionVariables.set(\"initial_count\",1)",
                  "}"
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "ce762e8a-8027-47aa-95b1-0ef5a7dfe348"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var moment = require('moment');",
                  "pm.collectionVariables.set(\"current_time\", moment.utc().format(\"YYYY-MM-DDTHH:mm:ssZ\"));",
                  "function driverLocationsplit() {",
                  "    var driverLocations = data[\"driversForwardBatchCheckLocations\"]; ",
                  "    var commaSeparation = driverLocations.split(\",\");",
                  "    var segregatedLocations = [];",
                  "    ",
                  "    // Loop through each comma-separated location",
                  "    for (var i = 0; i < commaSeparation.length; i++) {",
                  "    // Split each location by spaces and remove extra whitespace",
                  "    var latLon = commaSeparation[i].trim().split(/\\s+/);",
                  "    segregatedLocations.push(latLon);",
                  "    }",
                  "    pm.collectionVariables.set(\"driverLocations\", JSON.stringify(segregatedLocations));",
                  "}",
                  "driverLocationsplit();",
                  "// Parse the JSON string back into an array",
                  "let driverLocations = JSON.parse(pm.collectionVariables.get(\"driverLocations\"));",
                  "var initial_count = parseInt(pm.collectionVariables.get(\"initial_count\"));",
                  "let driver_tokens = JSON.parse(pm.environment.get(\"driver_tokens\"))",
                  "pm.variables.set(\"driver_Token\", driver_tokens[initial_count-1])",
                  "// Set the current driver number based on initial_count",
                  "pm.variables.set(\"driver_lat\", driverLocations[initial_count - 1][0])",
                  "pm.variables.set(\"driver_lon\", driverLocations[initial_count - 1][1])",
                  ""
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "b77effb4-cf0e-41b7-9f41-b113445d0ffc"
              }
            }
          ],
          "id": "466f1158-d562-4e5b-98cd-b85e43f39bba",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "value",
                  "value": "{{driver_Token}}",
                  "type": "string"
                },
                {
                  "key": "key",
                  "value": "token",
                  "type": "string"
                },
                {
                  "key": "in",
                  "value": "header",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json;charset=utf-8"
              },
              {
                "key": "vt",
                "value": "AUTO_RICKSHAW",
                "type": "text"
              },
              {
                "key": "mId",
                "value": "7f7896dd-787e-4a0b-8675-e9e6fe93bb8f",
                "type": "text"
              },
              {
                "key": "dm",
                "value": "ONLINE",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\n    {\n        \"pt\": {\n            \"lat\": {{driver_lat}},\n            \"lon\": {{driver_lon}}\n        },\n        \"ts\": \"{{current_time}}\"\n    },\n    {\n        \"pt\": {\n            \"lat\": {{driver_lat}},\n            \"lon\": {{driver_lon}}\n        },\n        \"ts\": \"{{current_time}}\"\n    },\n    {\n        \"pt\": {\n            \"lat\": {{driver_lat}},\n            \"lon\": {{driver_lon}}\n        },\n        \"ts\": \"{{current_time}}\"\n    },\n    {\n        \"pt\": {\n            \"lat\": {{driver_lat}},\n            \"lon\": {{driver_lon}}\n        },\n        \"ts\": \"{{current_time}}\"\n    },\n    {\n        \"pt\": {\n            \"lat\": {{driver_lat}},\n            \"lon\": {{driver_lon}}\n        },\n        \"ts\": \"{{current_time}}\"\n    }\n]",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseURL_namma_P}}/driver/location",
              "host": [
                "{{baseURL_namma_P}}"
              ],
              "path": [
                "driver",
                "location"
              ]
            }
          },
          "response": [],
          "uid": "38579165-466f1158-d562-4e5b-98cd-b85e43f39bba"
        },
        {
          "name": "/driver/nearbyRideRequest [b3]",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "var initial_count = pm.collectionVariables.get(\"initial_count\")",
                  "var TotalDriverNumbers = pm.collectionVariables.get(\"totalDriverNumbersCount\")",
                  "var batch_3 = pm.collectionVariables.get(\"batch_3\")",
                  "let driver_ids = JSON.parse(pm.collectionVariables.get(\"driver_ids\"))",
                  "",
                  "",
                  "pm.test(\"Verified whether Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.collectionVariables.set(\"initial_count\",++initial_count)",
                  "",
                  "if(jsonData.searchRequestsForDriver.length > 0)",
                  "{",
                  "    console.log(\"Driver \"+(initial_count-1)+\" received in batch 3\")",
                  "    console.log(\"driverId\",driver_ids[initial_count-2])",
                  "    console.log(\"SearchTryId \"+jsonData.searchRequestsForDriver[0].searchTryId)",
                  "    var result = batch_3.concat(\"1\")",
                  "    pm.collectionVariables.set(\"batch_3\",result)",
                  "}",
                  "else",
                  "{",
                  "    var result = batch_3.concat(\"0\")",
                  "    pm.collectionVariables.set(\"batch_3\",result)",
                  "}",
                  "",
                  "if(initial_count<=TotalDriverNumbers)",
                  "{",
                  "postman.setNextRequest(\"/driver/nearbyRideRequest [b3]\")",
                  "}",
                  "else",
                  "{",
                  "    pm.collectionVariables.set(\"initial_count\",1)",
                  "}",
                  "",
                  ""
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "f4e0d086-6fe5-4f58-8b6b-a4e545918900"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var moment = require('moment');",
                  "pm.globals.set(\"current_time\", moment.utc().format(\"YYYY-MM-DDTHH:mm:ssZ\"));",
                  "",
                  "var initial_count = pm.collectionVariables.get(\"initial_count\")",
                  "let driver_tokens = JSON.parse(pm.environment.get(\"driver_tokens\"))",
                  "",
                  "",
                  "",
                  "pm.variables.set(\"driver_Token\",driver_tokens[initial_count-1])",
                  "var wait_duration = Number(pm.collectionVariables.get(\"delay_between_batches\"))",
                  "",
                  "",
                  "if(initial_count==1)",
                  "{   ",
                  "    setTimeout(function(){},wait_duration)",
                  "    pm.collectionVariables.set(\"batch_3\",[])",
                  "}",
                  ""
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "4e3d05b4-a764-4d8e-a7bf-c038e95a4fef"
              }
            }
          ],
          "id": "3a8d5fbf-7e64-4b9d-8a70-91fd662fb10f",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "value",
                  "value": "{{driver_Token}}",
                  "type": "string"
                },
                {
                  "key": "key",
                  "value": "token",
                  "type": "string"
                },
                {
                  "key": "in",
                  "value": "header",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "token",
                "value": "{{app-reg-token}}",
                "type": "text",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{baseURL_namma_P}}/driver/nearbyRideRequest",
              "host": [
                "{{baseURL_namma_P}}"
              ],
              "path": [
                "driver",
                "nearbyRideRequest"
              ]
            }
          },
          "response": [],
          "uid": "38579165-3a8d5fbf-7e64-4b9d-8a70-91fd662fb10f"
        },
        {
          "name": "/driver/locationUpdate/4",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var initial_count = pm.collectionVariables.get(\"initial_count\")",
                  "var totalDriverNumbersCount = pm.collectionVariables.get(\"totalDriverNumbersCount\");",
                  "",
                  "pm.test(\"Verify whether Status code is 200\", function () {",
                  "    console.log(\"Request:\", pm.request);",
                  "",
                  "    try {",
                  "        pm.response.to.have.status(200);",
                  "        } ",
                  "    catch (error) {",
                  "        console.log(\"Status Code is not 200: It is \", pm.response.code);",
                  "        pm.collectionVariables.set(\"initial_count\", 1);",
                  "        throw new Error(\"Status Code is not 200\");",
                  "    }",
                  "});",
                  "",
                  "pm.collectionVariables.set(\"initial_count\",++initial_count)",
                  "",
                  "if(initial_count<=totalDriverNumbersCount)",
                  "{",
                  "postman.setNextRequest(\"/driver/locationUpdate/4\")",
                  "}",
                  "else",
                  "{   ",
                  "    pm.collectionVariables.set(\"initial_count\",1)",
                  "}"
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "63414e10-0c09-4214-915d-2dd68eb61acb"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var moment = require('moment');",
                  "pm.collectionVariables.set(\"current_time\", moment.utc().format(\"YYYY-MM-DDTHH:mm:ssZ\"));",
                  "function driverLocationsplit() {",
                  "    var driverLocations = data[\"driversForwardBatchCheckLocations\"]; ",
                  "    var commaSeparation = driverLocations.split(\",\");",
                  "    var segregatedLocations = [];",
                  "    ",
                  "    // Loop through each comma-separated location",
                  "    for (var i = 0; i < commaSeparation.length; i++) {",
                  "    // Split each location by spaces and remove extra whitespace",
                  "    var latLon = commaSeparation[i].trim().split(/\\s+/);",
                  "    segregatedLocations.push(latLon);",
                  "    }",
                  "    pm.collectionVariables.set(\"driverLocations\", JSON.stringify(segregatedLocations));",
                  "}",
                  "driverLocationsplit();",
                  "// Parse the JSON string back into an array",
                  "let driverLocations = JSON.parse(pm.collectionVariables.get(\"driverLocations\"));",
                  "var initial_count = parseInt(pm.collectionVariables.get(\"initial_count\"));",
                  "let driver_tokens = JSON.parse(pm.environment.get(\"driver_tokens\"))",
                  "pm.variables.set(\"driver_Token\", driver_tokens[initial_count-1])",
                  "// Set the current driver number based on initial_count",
                  "pm.variables.set(\"driver_lat\", driverLocations[initial_count - 1][0])",
                  "pm.variables.set(\"driver_lon\", driverLocations[initial_count - 1][1])",
                  ""
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "596878c7-2331-4c18-8272-df5c123f62df"
              }
            }
          ],
          "id": "df0fc87f-22a4-49c7-9679-825ac0f3c38b",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "value",
                  "value": "{{driver_Token}}",
                  "type": "string"
                },
                {
                  "key": "key",
                  "value": "token",
                  "type": "string"
                },
                {
                  "key": "in",
                  "value": "header",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json;charset=utf-8"
              },
              {
                "key": "vt",
                "value": "AUTO_RICKSHAW",
                "type": "text"
              },
              {
                "key": "mId",
                "value": "7f7896dd-787e-4a0b-8675-e9e6fe93bb8f",
                "type": "text"
              },
              {
                "key": "dm",
                "value": "ONLINE",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\n    {\n        \"pt\": {\n            \"lat\": {{driver_lat}},\n            \"lon\": {{driver_lon}}\n        },\n        \"ts\": \"{{current_time}}\"\n    },\n    {\n        \"pt\": {\n            \"lat\": {{driver_lat}},\n            \"lon\": {{driver_lon}}\n        },\n        \"ts\": \"{{current_time}}\"\n    },\n    {\n        \"pt\": {\n            \"lat\": {{driver_lat}},\n            \"lon\": {{driver_lon}}\n        },\n        \"ts\": \"{{current_time}}\"\n    },\n    {\n        \"pt\": {\n            \"lat\": {{driver_lat}},\n            \"lon\": {{driver_lon}}\n        },\n        \"ts\": \"{{current_time}}\"\n    },\n    {\n        \"pt\": {\n            \"lat\": {{driver_lat}},\n            \"lon\": {{driver_lon}}\n        },\n        \"ts\": \"{{current_time}}\"\n    }\n]",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseURL_namma_P}}/driver/location",
              "host": [
                "{{baseURL_namma_P}}"
              ],
              "path": [
                "driver",
                "location"
              ]
            }
          },
          "response": [],
          "uid": "38579165-df0fc87f-22a4-49c7-9679-825ac0f3c38b"
        },
        {
          "name": "/driver/nearbyRideRequest [b4]",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "var initial_count = pm.collectionVariables.get(\"initial_count\")",
                  "var TotalDriverNumbers = pm.collectionVariables.get(\"totalDriverNumbersCount\")",
                  "var batch_4 = pm.collectionVariables.get(\"batch_4\")",
                  "let driver_ids = JSON.parse(pm.collectionVariables.get(\"driver_ids\"))",
                  "",
                  "",
                  "pm.test(\"Verified whether Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.collectionVariables.set(\"initial_count\",++initial_count)",
                  "",
                  "if(jsonData.searchRequestsForDriver.length > 0)",
                  "{",
                  "    console.log(\"Driver \"+(initial_count-1)+\" received in batch 4\")",
                  "    console.log(\"driverId\",driver_ids[initial_count-2])",
                  "    console.log(\"SearchTryId \"+jsonData.searchRequestsForDriver[0].searchTryId)",
                  "    var result = batch_4.concat(\"1\")",
                  "    pm.collectionVariables.set(\"batch_4\",result)",
                  "}",
                  "else",
                  "{",
                  "    var result = batch_4.concat(\"0\")",
                  "    pm.collectionVariables.set(\"batch_4\",result)",
                  "}",
                  "",
                  "if(initial_count<=TotalDriverNumbers)",
                  "{",
                  "postman.setNextRequest(\"/driver/nearbyRideRequest [b4]\")",
                  "}",
                  "else",
                  "{",
                  "    pm.collectionVariables.set(\"initial_count\",1)",
                  "}",
                  "",
                  ""
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "ba6e9558-0b9f-4181-9d11-817493bf8326"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var moment = require('moment');",
                  "pm.globals.set(\"current_time\", moment.utc().format(\"YYYY-MM-DDTHH:mm:ssZ\"));",
                  "",
                  "var initial_count = pm.collectionVariables.get(\"initial_count\")",
                  "let driver_tokens = JSON.parse(pm.environment.get(\"driver_tokens\"))",
                  "",
                  "",
                  "pm.variables.set(\"driver_Token\",driver_tokens[initial_count-1])",
                  "var wait_duration = Number(pm.collectionVariables.get(\"delay_between_batches\"))",
                  "",
                  "",
                  "if(initial_count==1)",
                  "{",
                  "    setTimeout(function(){},wait_duration)",
                  "    pm.collectionVariables.set(\"batch_4\",[])",
                  "}",
                  ""
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "73861135-ad5f-4efc-9621-b83a9aebebc2"
              }
            }
          ],
          "id": "e37ae4f2-3e95-43bb-a611-fe0604ca822e",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "value",
                  "value": "{{driver_Token}}",
                  "type": "string"
                },
                {
                  "key": "key",
                  "value": "token",
                  "type": "string"
                },
                {
                  "key": "in",
                  "value": "header",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "token",
                "value": "{{app-reg-token}}",
                "type": "text",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{baseURL_namma_P}}/driver/nearbyRideRequest",
              "host": [
                "{{baseURL_namma_P}}"
              ],
              "path": [
                "driver",
                "nearbyRideRequest"
              ]
            }
          },
          "response": [],
          "uid": "38579165-e37ae4f2-3e95-43bb-a611-fe0604ca822e"
        },
        {
          "name": "/driver/locationUpdate/5",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var initial_count = pm.collectionVariables.get(\"initial_count\")",
                  "var totalDriverNumbersCount = pm.collectionVariables.get(\"totalDriverNumbersCount\");",
                  "",
                  "pm.test(\"Verify whether Status code is 200\", function () {",
                  "    console.log(\"Request:\", pm.request);",
                  "",
                  "    try {",
                  "        pm.response.to.have.status(200);",
                  "        } ",
                  "    catch (error) {",
                  "        console.log(\"Status Code is not 200: It is \", pm.response.code);",
                  "        pm.collectionVariables.set(\"initial_count\", 1);",
                  "        throw new Error(\"Status Code is not 200\");",
                  "    }",
                  "});",
                  "",
                  "pm.collectionVariables.set(\"initial_count\",++initial_count)",
                  "",
                  "if(initial_count<=totalDriverNumbersCount)",
                  "{",
                  "postman.setNextRequest(\"/driver/locationUpdate/5\")",
                  "}",
                  "else",
                  "{   ",
                  "    pm.collectionVariables.set(\"initial_count\",1)",
                  "}"
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "f5349919-d3ad-49bc-89c0-412fc796d9da"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var moment = require('moment');",
                  "pm.collectionVariables.set(\"current_time\", moment.utc().format(\"YYYY-MM-DDTHH:mm:ssZ\"));",
                  "function driverLocationsplit() {",
                  "    var driverLocations = data[\"driversForwardBatchCheckLocations\"]; ",
                  "    var commaSeparation = driverLocations.split(\",\");",
                  "    var segregatedLocations = [];",
                  "    ",
                  "    // Loop through each comma-separated location",
                  "    for (var i = 0; i < commaSeparation.length; i++) {",
                  "    // Split each location by spaces and remove extra whitespace",
                  "    var latLon = commaSeparation[i].trim().split(/\\s+/);",
                  "    segregatedLocations.push(latLon);",
                  "    }",
                  "    pm.collectionVariables.set(\"driverLocations\", JSON.stringify(segregatedLocations));",
                  "}",
                  "driverLocationsplit();",
                  "// Parse the JSON string back into an array",
                  "let driverLocations = JSON.parse(pm.collectionVariables.get(\"driverLocations\"));",
                  "var initial_count = parseInt(pm.collectionVariables.get(\"initial_count\"));",
                  "let driver_tokens = JSON.parse(pm.environment.get(\"driver_tokens\"))",
                  "pm.variables.set(\"driver_Token\", driver_tokens[initial_count-1])",
                  "// Set the current driver number based on initial_count",
                  "pm.variables.set(\"driver_lat\", driverLocations[initial_count - 1][0])",
                  "pm.variables.set(\"driver_lon\", driverLocations[initial_count - 1][1])",
                  ""
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "8452498c-39f6-47c3-88d0-506b084f6bea"
              }
            }
          ],
          "id": "f473728e-a9a6-46a8-816a-d5b27d9c49ce",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "value",
                  "value": "{{driver_Token}}",
                  "type": "string"
                },
                {
                  "key": "key",
                  "value": "token",
                  "type": "string"
                },
                {
                  "key": "in",
                  "value": "header",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json;charset=utf-8"
              },
              {
                "key": "vt",
                "value": "AUTO_RICKSHAW",
                "type": "text"
              },
              {
                "key": "mId",
                "value": "7f7896dd-787e-4a0b-8675-e9e6fe93bb8f",
                "type": "text"
              },
              {
                "key": "dm",
                "value": "ONLINE",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\n    {\n        \"pt\": {\n            \"lat\": {{driver_lat}},\n            \"lon\": {{driver_lon}}\n        },\n        \"ts\": \"{{current_time}}\"\n    },\n    {\n        \"pt\": {\n            \"lat\": {{driver_lat}},\n            \"lon\": {{driver_lon}}\n        },\n        \"ts\": \"{{current_time}}\"\n    },\n    {\n        \"pt\": {\n            \"lat\": {{driver_lat}},\n            \"lon\": {{driver_lon}}\n        },\n        \"ts\": \"{{current_time}}\"\n    },\n    {\n        \"pt\": {\n            \"lat\": {{driver_lat}},\n            \"lon\": {{driver_lon}}\n        },\n        \"ts\": \"{{current_time}}\"\n    },\n    {\n        \"pt\": {\n            \"lat\": {{driver_lat}},\n            \"lon\": {{driver_lon}}\n        },\n        \"ts\": \"{{current_time}}\"\n    }\n]",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseURL_namma_P}}/driver/location",
              "host": [
                "{{baseURL_namma_P}}"
              ],
              "path": [
                "driver",
                "location"
              ]
            }
          },
          "response": [],
          "uid": "38579165-f473728e-a9a6-46a8-816a-d5b27d9c49ce"
        },
        {
          "name": "/driver/nearbyRideRequest [b5]",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "var initial_count = pm.collectionVariables.get(\"initial_count\")",
                  "var TotalDriverNumbers = pm.collectionVariables.get(\"totalDriverNumbersCount\")",
                  "var batch_5 = pm.collectionVariables.get(\"batch_5\")",
                  "let driver_ids = JSON.parse(pm.collectionVariables.get(\"driver_ids\"))",
                  "",
                  "",
                  "pm.test(\"Verified whether Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.collectionVariables.set(\"initial_count\",++initial_count)",
                  "",
                  "if(jsonData.searchRequestsForDriver.length > 0)",
                  "{",
                  "    console.log(\"Driver \"+(initial_count-1)+\" received in batch 5\")",
                  "    console.log(\"driverId\",driver_ids[initial_count-2])",
                  "    console.log(\"SearchTryId \"+jsonData.searchRequestsForDriver[0].searchTryId)",
                  "    var result = batch_5.concat(\"1\")",
                  "    pm.collectionVariables.set(\"batch_5\",result)",
                  "}",
                  "else",
                  "{",
                  "    var result = batch_5.concat(\"0\")",
                  "    pm.collectionVariables.set(\"batch_5\",result)",
                  "}",
                  "",
                  "if(initial_count<=TotalDriverNumbers)",
                  "{",
                  "postman.setNextRequest(\"/driver/nearbyRideRequest [b5]\")",
                  "}",
                  "else",
                  "{",
                  "    pm.collectionVariables.set(\"initial_count\",1)",
                  "}",
                  "",
                  ""
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "2be487b6-eb19-42dc-adec-e93e8f9d7aed"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var moment = require('moment');",
                  "pm.globals.set(\"current_time\", moment.utc().format(\"YYYY-MM-DDTHH:mm:ssZ\"));",
                  "",
                  "var initial_count = pm.collectionVariables.get(\"initial_count\")",
                  "let driver_tokens = JSON.parse(pm.environment.get(\"driver_tokens\"))",
                  "",
                  "",
                  "",
                  "pm.variables.set(\"driver_Token\",driver_tokens[initial_count-1])",
                  "var wait_duration = Number(pm.collectionVariables.get(\"delay_between_batches\"))",
                  "",
                  "",
                  "if(initial_count==1)",
                  "{",
                  "    setTimeout(function(){},wait_duration)",
                  "    pm.collectionVariables.set(\"batch_5\",[])",
                  "}",
                  ""
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "ac217a74-1fac-473e-b4cb-60a3b67d546b"
              }
            }
          ],
          "id": "ee9e9961-5ecd-41b4-8d5d-3784aa61101a",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "value",
                  "value": "{{driver_Token}}",
                  "type": "string"
                },
                {
                  "key": "key",
                  "value": "token",
                  "type": "string"
                },
                {
                  "key": "in",
                  "value": "header",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "token",
                "value": "{{app-reg-token}}",
                "type": "text",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{baseURL_namma_P}}/driver/nearbyRideRequest",
              "host": [
                "{{baseURL_namma_P}}"
              ],
              "path": [
                "driver",
                "nearbyRideRequest"
              ]
            }
          },
          "response": [],
          "uid": "38579165-ee9e9961-5ecd-41b4-8d5d-3784aa61101a"
        },
        {
          "name": "/driver/locationUpdate/6",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var initial_count = pm.collectionVariables.get(\"initial_count\")",
                  "var totalDriverNumbersCount = pm.collectionVariables.get(\"totalDriverNumbersCount\");",
                  "",
                  "pm.test(\"Verify whether Status code is 200\", function () {",
                  "    console.log(\"Request:\", pm.request);",
                  "",
                  "    try {",
                  "        pm.response.to.have.status(200);",
                  "        } ",
                  "    catch (error) {",
                  "        console.log(\"Status Code is not 200: It is \", pm.response.code);",
                  "        pm.collectionVariables.set(\"initial_count\", 1);",
                  "        throw new Error(\"Status Code is not 200\");",
                  "    }",
                  "});",
                  "",
                  "pm.collectionVariables.set(\"initial_count\",++initial_count)",
                  "",
                  "if(initial_count<=totalDriverNumbersCount)",
                  "{",
                  "postman.setNextRequest(\"/driver/locationUpdate/6\")",
                  "}",
                  "else",
                  "{   ",
                  "    pm.collectionVariables.set(\"initial_count\",1)",
                  "}"
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "167c667d-83bc-47a3-8c97-72e94db218ff"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var moment = require('moment');",
                  "pm.collectionVariables.set(\"current_time\", moment.utc().format(\"YYYY-MM-DDTHH:mm:ssZ\"));",
                  "function driverLocationsplit() {",
                  "    var driverLocations = data[\"driversForwardBatchCheckLocations\"]; ",
                  "    var commaSeparation = driverLocations.split(\",\");",
                  "    var segregatedLocations = [];",
                  "    ",
                  "    // Loop through each comma-separated location",
                  "    for (var i = 0; i < commaSeparation.length; i++) {",
                  "    // Split each location by spaces and remove extra whitespace",
                  "    var latLon = commaSeparation[i].trim().split(/\\s+/);",
                  "    segregatedLocations.push(latLon);",
                  "    }",
                  "    pm.collectionVariables.set(\"driverLocations\", JSON.stringify(segregatedLocations));",
                  "}",
                  "driverLocationsplit();",
                  "// Parse the JSON string back into an array",
                  "let driverLocations = JSON.parse(pm.collectionVariables.get(\"driverLocations\"));",
                  "var initial_count = parseInt(pm.collectionVariables.get(\"initial_count\"));",
                  "let driver_tokens = JSON.parse(pm.environment.get(\"driver_tokens\"))",
                  "pm.variables.set(\"driver_Token\", driver_tokens[initial_count-1])",
                  "// Set the current driver number based on initial_count",
                  "pm.variables.set(\"driver_lat\", driverLocations[initial_count - 1][0])",
                  "pm.variables.set(\"driver_lon\", driverLocations[initial_count - 1][1])",
                  ""
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "a5141a44-c061-447a-9428-0947d01289c3"
              }
            }
          ],
          "id": "2fc307a0-b3ee-428c-bc7f-6c7dbbc24db3",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "value",
                  "value": "{{driver_Token}}",
                  "type": "string"
                },
                {
                  "key": "key",
                  "value": "token",
                  "type": "string"
                },
                {
                  "key": "in",
                  "value": "header",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json;charset=utf-8"
              },
              {
                "key": "vt",
                "value": "AUTO_RICKSHAW",
                "type": "text"
              },
              {
                "key": "mId",
                "value": "7f7896dd-787e-4a0b-8675-e9e6fe93bb8f",
                "type": "text"
              },
              {
                "key": "dm",
                "value": "ONLINE",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\n    {\n        \"pt\": {\n            \"lat\": {{driver_lat}},\n            \"lon\": {{driver_lon}}\n        },\n        \"ts\": \"{{current_time}}\"\n    },\n    {\n        \"pt\": {\n            \"lat\": {{driver_lat}},\n            \"lon\": {{driver_lon}}\n        },\n        \"ts\": \"{{current_time}}\"\n    },\n    {\n        \"pt\": {\n            \"lat\": {{driver_lat}},\n            \"lon\": {{driver_lon}}\n        },\n        \"ts\": \"{{current_time}}\"\n    },\n    {\n        \"pt\": {\n            \"lat\": {{driver_lat}},\n            \"lon\": {{driver_lon}}\n        },\n        \"ts\": \"{{current_time}}\"\n    },\n    {\n        \"pt\": {\n            \"lat\": {{driver_lat}},\n            \"lon\": {{driver_lon}}\n        },\n        \"ts\": \"{{current_time}}\"\n    }\n]",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseURL_namma_P}}/driver/location",
              "host": [
                "{{baseURL_namma_P}}"
              ],
              "path": [
                "driver",
                "location"
              ]
            }
          },
          "response": [],
          "uid": "38579165-2fc307a0-b3ee-428c-bc7f-6c7dbbc24db3"
        },
        {
          "name": "/driver/nearbyRideRequest [b6]",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "var initial_count = pm.collectionVariables.get(\"initial_count\")",
                  "var TotalDriverNumbers = pm.collectionVariables.get(\"totalDriverNumbersCount\")",
                  "var batch_6 = pm.collectionVariables.get(\"batch_6\")",
                  "let driver_ids = JSON.parse(pm.collectionVariables.get(\"driver_ids\"))",
                  "",
                  "",
                  "pm.test(\"Verified whether Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.collectionVariables.set(\"initial_count\",++initial_count)",
                  "",
                  "if(jsonData.searchRequestsForDriver.length > 0)",
                  "{",
                  "    console.log(\"Driver \"+(initial_count-1)+\" received in batch 6\")",
                  "    console.log(\"driverId\",driver_ids[initial_count-2])",
                  "    console.log(\"SearchTryId \"+jsonData.searchRequestsForDriver[0].searchTryId)",
                  "    var result = batch_6.concat(\"1\")",
                  "    pm.collectionVariables.set(\"batch_6\",result)",
                  "}",
                  "else",
                  "{",
                  "    var result = batch_6.concat(\"0\")",
                  "    pm.collectionVariables.set(\"batch_6\",result)",
                  "}",
                  "",
                  "if(initial_count<=TotalDriverNumbers)",
                  "{",
                  "postman.setNextRequest(\"/driver/nearbyRideRequest [b6]\")",
                  "}",
                  "else",
                  "{",
                  "    pm.collectionVariables.set(\"initial_count\",1)",
                  "    for(i=0; i<6;i++){",
                  "        console.log(\"Batch \"+(i+1)+\" = \",pm.collectionVariables.get(\"batch_\"+(i+1)))",
                  "    }",
                  "}",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "a8adf814-e38f-40bd-9b40-ef77a7dd9129"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var moment = require('moment');",
                  "pm.globals.set(\"current_time\", moment.utc().format(\"YYYY-MM-DDTHH:mm:ssZ\"));",
                  "",
                  "var initial_count = pm.collectionVariables.get(\"initial_count\")",
                  "let driver_tokens = JSON.parse(pm.environment.get(\"driver_tokens\"))",
                  "",
                  "",
                  "",
                  "pm.variables.set(\"driver_Token\",driver_tokens[initial_count-1])",
                  "var wait_duration = Number(pm.collectionVariables.get(\"delay_between_batches\"))",
                  "",
                  "",
                  "if(initial_count==1)",
                  "{",
                  "    setTimeout(function(){},wait_duration)",
                  "    pm.collectionVariables.set(\"batch_6\",[])",
                  "}",
                  ""
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "086b8946-299f-4c0b-8034-54f9370e096b"
              }
            }
          ],
          "id": "881cabfb-cda5-4057-9a1e-2394363c5be6",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "value",
                  "value": "{{driver_Token}}",
                  "type": "string"
                },
                {
                  "key": "key",
                  "value": "token",
                  "type": "string"
                },
                {
                  "key": "in",
                  "value": "header",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "token",
                "value": "{{app-reg-token}}",
                "type": "text",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{baseURL_namma_P}}/driver/nearbyRideRequest",
              "host": [
                "{{baseURL_namma_P}}"
              ],
              "path": [
                "driver",
                "nearbyRideRequest"
              ]
            }
          },
          "response": [],
          "uid": "38579165-881cabfb-cda5-4057-9a1e-2394363c5be6"
        },
        {
          "name": "driver/ride/rideId/end",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "",
                  "pm.test(\"Verify whether Status code is 200\", function () {",
                  "    console.log(\"Request:\", pm.request);",
                  "    console.log(\"Response Body:\", pm.response.text());",
                  "",
                  "    try {",
                  "        pm.response.to.have.status(200);",
                  "        } ",
                  "    catch (error) {",
                  "        console.log(\"Status Code is not 200: It is \", pm.response.code);",
                  "        pm.collectionVariables.set(\"initial_count\", 1);",
                  "        throw new Error(\"Status Code is not 200\");",
                  "    }",
                  "});",
                  "",
                  "if (responseCode.code !== 200) ",
                  "{",
                  "    postman.setNextRequest(null);",
                  "}",
                  "",
                  "let initial_count = pm.collectionVariables.get(\"initial_count\")",
                  "let totalCustomerNumbers = pm.collectionVariables.get(\"totalCustomerNumbers\")",
                  "",
                  "if (initial_count < totalCustomerNumbers) ",
                  "{",
                  "    postman.setNextRequest(\"driver/ride/rideId/end\");",
                  "    pm.collectionVariables.set(\"initial_count\", ++initial_count);",
                  "} ",
                  "else ",
                  "{",
                  "    pm.collectionVariables.set(\"initial_count\", 1);",
                  "    postman.setNextRequest(null)",
                  "}"
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "7b423a8c-e1d7-4b4f-bcf1-41ff1c1f3066"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var driverTokens = JSON.parse(pm.environment.get(\"driver_tokens\"));",
                  "let initial_count = parseInt(pm.collectionVariables.get(\"initial_count\"))",
                  "pm.variables.set(\"driver_Token\", driverTokens[initial_count-1])",
                  "",
                  "let driverSideOnRideIds = JSON.parse(pm.environment.get(\"driverSideOnRideIds\"))",
                  "let initialRideDestLocations = JSON.parse(pm.collectionVariables.get(\"initialRideDestLocations\"));",
                  "",
                  "",
                  "",
                  "pm.variables.set(\"driver_Token\", driverTokens[initial_count-1])",
                  "pm.variables.set(\"driverRideId\",driverSideOnRideIds[initial_count-1])",
                  "pm.variables.set(\"destination_Lat\", initialRideDestLocations[initial_count - 1][0])",
                  "pm.variables.set(\"destination_Lon\", initialRideDestLocations[initial_count - 1][1])",
                  ""
                ],
                "type": "text/javascript",
                "packages": {},
                "id": "a21ad316-b13f-4d13-8f65-7cd1161241e8"
              }
            }
          ],
          "id": "7f3b9378-3d71-4e69-a4c4-cfcc7f5ade69",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "value",
                  "value": "{{driver_Token}}",
                  "type": "string"
                },
                {
                  "key": "key",
                  "value": "token",
                  "type": "string"
                },
                {
                  "key": "in",
                  "value": "header",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "token",
                "value": "{{app-reg-token}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"point\": {\n        \"lat\": {{destination_Lat}},\n        \"lon\": {{destination_Lon}}\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseURL_namma_P}}/driver/ride/:rideId/end",
              "host": [
                "{{baseURL_namma_P}}"
              ],
              "path": [
                "driver",
                "ride",
                ":rideId",
                "end"
              ],
              "variable": [
                {
                  "id": "e3e29b09-cddb-44fa-bbca-a967f2689e7e",
                  "key": "rideId",
                  "value": "{{driverRideId}}"
                }
              ]
            }
          },
          "response": [],
          "uid": "38579165-7f3b9378-3d71-4e69-a4c4-cfcc7f5ade69"
        },
        {
          "name": "/driver/setActivity?active=false",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "var initial_count = pm.collectionVariables.get(\"initial_count\")",
                  "var TotalDriverNumbers = pm.collectionVariables.get(\"TotalDriverNumbers\")",
                  "",
                  "pm.test(\"Verified whether Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.collectionVariables.set(\"initial_count\",++initial_count)",
                  "",
                  "if(initial_count<=TotalDriverNumbers)",
                  "{",
                  "postman.setNextRequest(\"/driver/setActivity?active=false\")",
                  "}",
                  "else",
                  "{",
                  "    pm.collectionVariables.set(\"initial_count\",1)",
                  "}"
                ],
                "type": "text/javascript",
                "id": "cd849cd0-8b54-4ed5-b143-39d788d6f2e4"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var initial_count = pm.collectionVariables.get(\"initial_count\")",
                  "var total_numbers = pm.collectionVariables.get(\"total_numbers\")",
                  "let driver_tokens = JSON.parse(pm.collectionVariables.get(\"driver_tokens\"))",
                  "",
                  "",
                  "// pm.variables.set(\"activity_status\",active[initial_count-1])",
                  "// pm.variables.set(\"mode\",mode[initial_count-1])",
                  "pm.variables.set(\"driver_Token\",driver_tokens[initial_count-1])",
                  "setTimeout(function(){},500)"
                ],
                "type": "text/javascript",
                "id": "91d4221d-62b7-4024-963e-293a0caa0865"
              }
            }
          ],
          "id": "c2339aab-1556-4219-bef1-ab33251df09d",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "value",
                  "value": "{{driver_Token}}",
                  "type": "string"
                },
                {
                  "key": "key",
                  "value": "token",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json;charset=utf-8"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseURL_namma_P}}/driver/setActivity?active=false&mode=\"OFFLINE\"",
              "host": [
                "{{baseURL_namma_P}}"
              ],
              "path": [
                "driver",
                "setActivity"
              ],
              "query": [
                {
                  "key": "active",
                  "value": "false"
                },
                {
                  "key": "mode",
                  "value": "\"OFFLINE\""
                }
              ]
            }
          },
          "response": [],
          "uid": "38579165-c2339aab-1556-4219-bef1-ab33251df09d"
        }
      ],
      "id": "90a4c564-8c4f-42a8-8f94-a7cf618a355e",
      "uid": "38579165-90a4c564-8c4f-42a8-8f94-a7cf618a355e"
    }
  ],
  "auth": {
    "type": "apikey",
    "apikey": [
      {
        "key": "value",
        "value": "{{app-reg-token}}",
        "type": "string"
      },
      {
        "key": "key",
        "value": "token",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// // Define your environment ID and Postman API key",
          "// const environmentId = '25113445-f275c171-d6d4-4dbb-9c25-a37521107b0d';",
          "// const apiKey = 'PMAK-66758f9682e02a00018efa0a-eee8a5d27468a3d6706e1669347769f9f8';",
          "",
          "// // Get the environment variables",
          "// let environmentVariables = pm.environment.toObject();",
          "",
          "// // Prepare the data for the API request",
          "// let environmentData = {",
          "//     \"name\": pm.environment.name,",
          "//     \"values\": Object.keys(environmentVariables).map(key => ({",
          "//         \"key\": key,",
          "//         \"value\": environmentVariables[key],",
          "//         \"enabled\": true",
          "//     }))",
          "// };",
          "",
          "// // Define the Postman API URL for updating the environment",
          "// const postmanApiUrl = `https://api.getpostman.com/environments/${environmentId}`;",
          "",
          "// // Make the API request to update the environment",
          "// pm.sendRequest({",
          "//     url: postmanApiUrl,",
          "//     method: 'PUT',",
          "//     header: {",
          "//         'X-Api-Key': apiKey,",
          "//         'Content-Type': 'application/json'",
          "//     },",
          "//     body: {",
          "//         mode: 'raw',",
          "//         raw: JSON.stringify({ environment: environmentData })",
          "//     }",
          "// }, function (err, res) {",
          "//     if (err) {",
          "//         console.error('Failed to update the environment:', err);",
          "//     } else {",
          "//         console.log('Environment updated successfully:', res);",
          "//     }",
          "// });",
          ""
        ],
        "id": "b6617abc-fe48-4be5-a422-45be18a1cb4b"
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ],
        "id": "86176efa-353c-4122-8316-bdf2742470a6"
      }
    }
  ],
  "variable": [
    {
      "key": "initial_count",
      "value": "1"
    },
    {
      "key": "total_numbers",
      "value": ""
    },
    {
      "key": "TotalDriverNumbers",
      "value": "12"
    },
    {
      "key": "first_batch_hold_duration",
      "value": "15000"
    },
    {
      "key": "delay_between_batches",
      "value": "22000"
    },
    {
      "key": "driver_tokens",
      "value": ""
    },
    {
      "key": "customer_authId",
      "value": ""
    },
    {
      "key": "ride_searchId",
      "value": ""
    },
    {
      "key": "customer_Token",
      "value": ""
    },
    {
      "key": "ride_estimateid",
      "value": ""
    },
    {
      "key": "curr_driver_authId",
      "value": ""
    },
    {
      "key": "curr_token",
      "value": ""
    },
    {
      "key": "rider_token",
      "value": ""
    },
    {
      "key": "searchId",
      "value": ""
    },
    {
      "key": "curr_rider_authId",
      "value": ""
    },
    {
      "key": "app-reg-token",
      "value": ""
    },
    {
      "key": "curr_estimateid",
      "value": ""
    },
    {
      "key": "batch_1",
      "value": ""
    },
    {
      "key": "batch_2",
      "value": ""
    },
    {
      "key": "batch_3",
      "value": ""
    },
    {
      "key": "batch_4",
      "value": ""
    },
    {
      "key": "batch_5",
      "value": ""
    },
    {
      "key": "batch_6",
      "value": ""
    },
    {
      "key": "driversLat",
      "value": ""
    },
    {
      "key": "driversLon",
      "value": ""
    },
    {
      "key": "customerAuthId",
      "value": ""
    },
    {
      "key": "driver_authIds",
      "value": ""
    },
    {
      "key": "curr_rider_authId_1",
      "value": ""
    },
    {
      "key": "curr_token_1",
      "value": ""
    },
    {
      "key": "driver_1_id",
      "value": ""
    },
    {
      "key": "user_auth_id_intel",
      "value": ""
    },
    {
      "key": "user-reg-token-intel",
      "value": ""
    },
    {
      "key": "user_intel_searchId",
      "value": ""
    },
    {
      "key": "user_intel_estimateId",
      "value": ""
    },
    {
      "key": "accept_searchId_1",
      "value": ""
    },
    {
      "key": "quoteIdnew",
      "value": ""
    },
    {
      "key": "curr_app_bookingId_1",
      "value": ""
    },
    {
      "key": "otp_1",
      "value": ""
    },
    {
      "key": "ride_id_1",
      "value": ""
    },
    {
      "key": "customerNumbers",
      "value": ""
    },
    {
      "key": "customerNumbersCount",
      "value": ""
    },
    {
      "key": "EstiHatch",
      "value": ""
    },
    {
      "key": "EstiTaxi",
      "value": ""
    },
    {
      "key": "EstiAuto",
      "value": ""
    },
    {
      "key": "EstiSedan",
      "value": ""
    },
    {
      "key": "Estisuv",
      "value": ""
    },
    {
      "key": "driver_ids",
      "value": ""
    },
    {
      "key": "driverNumbers",
      "value": ""
    },
    {
      "key": "totalDriverNumbers",
      "value": ""
    },
    {
      "key": "driverAuthIds",
      "value": ""
    },
    {
      "key": "current_time",
      "value": ""
    },
    {
      "key": "driverLocations",
      "value": ""
    },
    {
      "key": "driverModes",
      "value": ""
    },
    {
      "key": "totalCustomerNumbers",
      "value": ""
    },
    {
      "key": "customerAuthIds",
      "value": ""
    },
    {
      "key": "customerIds",
      "value": ""
    },
    {
      "key": "customerTokens",
      "value": ""
    },
    {
      "key": "initialRideSourceLocations",
      "value": ""
    },
    {
      "key": "initialRideDestLocations",
      "value": ""
    },
    {
      "key": "rseq_count",
      "value": ""
    },
    {
      "key": "ncrr_count",
      "value": ""
    },
    {
      "key": "customer_estimate_id",
      "value": ""
    },
    {
      "key": "driver_search_request_id",
      "value": ""
    },
    {
      "key": "driverSearchTryId",
      "value": ""
    },
    {
      "key": "userOtp",
      "value": ""
    },
    {
      "key": "userBookingId",
      "value": ""
    },
    {
      "key": "driverRideId",
      "value": ""
    },
    {
      "key": "totalDriverNumbersCount",
      "value": ""
    },
    {
      "key": "onRideDriverCount",
      "value": ""
    },
    {
      "key": "initialValue",
      "value": ""
    },
    {
      "key": "onRideDriversCount",
      "value": ""
    },
    {
      "key": "estimatesRetryCount",
      "value": ""
    },
    {
      "key": "retryFlag",
      "value": ""
    },
    {
      "key": "driverSideOnRideIds",
      "value": ""
    },
    {
      "key": "customerauthId",
      "value": ""
    },
    {
      "key": "customerToken",
      "value": ""
    },
    {
      "key": "locationFlag",
      "value": ""
    }
  ]
}